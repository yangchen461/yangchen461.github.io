<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Dynamic Programming(4)---Longest Increasing Subsequence</title>
      <link href="/2025/04/29/Dynamic%20Programming(4)---Longest%20Increasing%20Subsequence/"/>
      <url>/2025/04/29/Dynamic%20Programming(4)---Longest%20Increasing%20Subsequence/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="✨-Overview-of-the-Programming-Content"><a href="#✨-Overview-of-the-Programming-Content" class="headerlink" title="✨ Overview of the Programming Content"></a>✨ Overview of the Programming Content</h1><ol><li>Longest increasing subsequence;</li><li>Number of longest increasing subsequences;</li><li>Longest chain of pairs of numbers;</li><li>Longest fixed difference subsequences;</li><li>Longest arithmetic progression;</li><li>Russian doll envelope problem;</li><li>Find the longest valid obstacle race route to each position;</li></ol><p>Recommended editing tool: **Typora **(Markdown editing) </p><hr><h1 id="1-Longest-Increasing-Subsequence"><a href="#1-Longest-Increasing-Subsequence" class="headerlink" title="1. Longest Increasing Subsequence"></a>1. Longest Increasing Subsequence</h1><p>Given an array of integers $nums$, find the length of the longest strictly increasing subsequence in it.</p><p>A subsequence is a sequence derived from an array by removing(or not removing) elements from the array without changing the order of the remaining elements. For example, $[3,6,2,7]$ is a subsequence of the array $[0,3,1,6,2,2,7]$.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Longest increasing subsequence” question is:<br>$$<br>dp[i] &#x3D; max(dp[j]) + 1, 0 ≤ j &lt; i,\text{and}, num[j] &lt; num[i]<br>$$<br>Define $dp[i]$ as the length of the longest ascending subsequence ending with the $i$th digit considering the first $i$ elements. Note that $nums[i]$ must be selected.</p><p>Since $dp[j]$ represents the longest increasing subsequence ending with $nums[j]$ in $nums[0…j]$, if we can transfer from the state of $dp[j]$, then $nums[i]$ must be greater than $nums[j]$,so that $nums[i]$ can be placed after $nums[j]$ to form a longer increasing subsequence.</p><p>Finally, the longest ascending subsequence of the entire array is the maximum value among all $dp[j]$.<br>$$<br>\text{LIS}_{\text{length}} &#x3D; \max(dp[i]),\quad \text{while} \quad 0 \leq i &lt; n<br>$$<br>The answer is $max(dp)$.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <br>        <span class="hljs-comment">// Initialize the dynamic programming array.</span><br>        <span class="hljs-comment">// dp[i] represents the length of the longest increasing subsequence ending at nums[i], initialized to 1 (each number itself forms a subsequence).</span><br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n, <span class="hljs-number">1</span>)</span></span>;<br><br>        <span class="hljs-comment">// Traverse each element, treating it as the end of the current increasing subsequence.</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-comment">// For each i, check all previous nums[j] where j &lt; i.</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-comment">// If nums[j] &lt; nums[i], it can form an increasing subsequence.</span><br>                <span class="hljs-keyword">if</span>(nums[j] &lt; nums[i]) &#123;<br>                    <span class="hljs-comment">// Update the length of the longest increasing subsequence ending at nums[i].</span><br>                    dp[i] = <span class="hljs-built_in">max</span>(dp[i], dp[j] + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Return the maximum value in the dp array, which is the length of the longest increasing subsequence in the array.</span><br>        <span class="hljs-keyword">return</span> *<span class="hljs-built_in">max_element</span>(dp.<span class="hljs-built_in">begin</span>(), dp.<span class="hljs-built_in">end</span>());<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis"><a href="#Complexity-Analysis" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(n^2)$</p></li><li><p><strong>Space Complexity:</strong> $O(n)$</p></li></ul><hr><h1 id="2-The-Number-of-the-Longest-Increasing-Subsequence"><a href="#2-The-Number-of-the-Longest-Increasing-Subsequence" class="headerlink" title="2. The Number of the Longest Increasing Subsequence"></a>2. The Number of the Longest Increasing Subsequence</h1><h2 id="Question-Description"><a href="#Question-Description" class="headerlink" title="Question Description"></a>Question Description</h2><p>Given an unsorted integer array $nums$, return the number of the longest increasing subsequence.</p><p>Note that this sequence must be strictly increasing.</p><h2 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “The number of the longest increasing subsequence” question is:<br>$$<br>cnt(i)&#x3D;<br>\begin{cases}<br>cnt(j),&amp; \text{dp(i) &lt; dp(j) + 1}\\<br>cnt(i) + cnt(j),dp(i,j-1)),&amp;\text{dp(i) ≥ dp(j)}<br>\end{cases}<br>$$<br>For $cnt[i]$, it is equal to the sum of all $cnt[j]$ that satisfy $dp[j] + 1 &#x3D; dp[i]$. When implementing the code, we can count the value of $cnt[i]$ while calculating $dp[i]$.</p><h4 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h4><p>When calculating the final answer $ans$, we should use $ans +&#x3D; cnt[i]$ not $ans &#x3D; cnt[i]$.</p><p>Assuming that the first element that meets the condition is traversed, $ans &#x3D; cnt[i]$ is directly assigned a value. If another $i$ that meets the condition is encountered later, it will be overwritten and the previous count will be lost.</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findNumberOfLIS</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// Edge case: return 0 if the array is empty</span><br><br>        <span class="hljs-comment">// dp[i] represents the length of the longest increasing subsequence ending at nums[i], initialized to 1 (itself only)</span><br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n, <span class="hljs-number">1</span>)</span></span>;<br>        <br>        <span class="hljs-comment">// cnt[i] represents the number of longest increasing subsequences ending at nums[i], initialized to 1 (itself only)</span><br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">cnt</span><span class="hljs-params">(n, <span class="hljs-number">1</span>)</span></span>;<br><br>        <span class="hljs-comment">// Double loop to check all index pairs (j, i) where j &lt; i</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-comment">// If nums[i] can be appended after nums[j] to form an increasing subsequence</span><br>                <span class="hljs-keyword">if</span> (nums[i] &gt; nums[j]) &#123;<br>                    <span class="hljs-comment">// Case 1: Found a longer increasing subsequence</span><br>                    <span class="hljs-keyword">if</span> (dp[j] + <span class="hljs-number">1</span> &gt; dp[i]) &#123;<br>                        dp[i] = dp[j] + <span class="hljs-number">1</span>;    <span class="hljs-comment">// Update dp[i] to the new longer length</span><br>                        cnt[i] = cnt[j];      <span class="hljs-comment">// Inherit the number of paths from cnt[j]</span><br>                    &#125;<br>                    <span class="hljs-comment">// Case 2: Found another subsequence of the same maximum length</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dp[j] + <span class="hljs-number">1</span> == dp[i]) &#123;<br>                        cnt[i] += cnt[j];     <span class="hljs-comment">// Add the number of new paths</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Find the maximum length of increasing subsequences</span><br>        <span class="hljs-type">int</span> res = *<span class="hljs-built_in">max_element</span>(dp.<span class="hljs-built_in">begin</span>(), dp.<span class="hljs-built_in">end</span>());<br><br>        <span class="hljs-comment">// Sum up the counts of all subsequences having the maximum length</span><br>        <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; dp.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (dp[i] == res) &#123;<br>                count += cnt[i];  <span class="hljs-comment">// Accumulate the number of paths</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> count;  <span class="hljs-comment">// Return the total number of longest increasing subsequences</span><br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-1"><a href="#Complexity-Analysis-1" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(n^2)$</p></li><li><p><strong>Space Complexity:</strong> $O(n)$</p></li></ul><hr><h1 id="3-Longest-Pair-Chain"><a href="#3-Longest-Pair-Chain" class="headerlink" title="3. Longest Pair Chain"></a>3. Longest Pair Chain</h1><h2 id="Question-Description-1"><a href="#Question-Description-1" class="headerlink" title="Question Description"></a>Question Description</h2><p>Given an array pairs consisting of $n$ pairs, where $pairs[i] &#x3D; [left_i,right_i]$ and $left_i &lt; right_i$.</p><p>Now, we define a following relation, that is, a pair $p_2 &#x3D; [c,d]$ can follow $p_1 &#x3D; [a,b]$ if and only if $b &lt; c$. </p><p>We use this form to construct a <strong>pair chain</strong>.</p><p>Find and return the length of the <strong>longest pair chain</strong> that can be formed.</p><p>You do not need to use all the pairs. You can choose some of them in any order to construct.</p><h2 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Longest Pair Chain” is<br>$$<br>dp(i) &#x3D; max(dp(i),dp(j) + 1), \text{while}, pairs[i][0] &gt; pairs[j][1]<br>$$</p><h4 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h4><p>Before the comparison, you should $sort$ the array while this question is not sorted in the order of the array.</p><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findLongestChain</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; pairs)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = pairs.<span class="hljs-built_in">size</span>();<br>        <br>        <span class="hljs-comment">// Sort all pairs based on the first element (pairs[i][0]) in ascending order</span><br>        <span class="hljs-built_in">sort</span>(pairs.<span class="hljs-built_in">begin</span>(), pairs.<span class="hljs-built_in">end</span>());<br><br>        <span class="hljs-comment">// dp[i] represents the length of the longest chain ending with the i-th pair, initialized to 1 (each pair itself forms a chain)</span><br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n, <span class="hljs-number">1</span>)</span></span>;<br><br>        <span class="hljs-comment">// For each pair[i], try to extend it after previous pairs[j]</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-comment">// If the end of pairs[j] is less than the start of pairs[i], they can be chained</span><br>                <span class="hljs-keyword">if</span> (pairs[j][<span class="hljs-number">1</span>] &lt; pairs[i][<span class="hljs-number">0</span>]) &#123;<br>                    <span class="hljs-comment">// Update the longest chain length ending at pairs[i]</span><br>                    dp[i] = <span class="hljs-built_in">max</span>(dp[i], dp[j] + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Return the maximum length among all chains ending with each pair</span><br>        <span class="hljs-keyword">return</span> *<span class="hljs-built_in">max_element</span>(dp.<span class="hljs-built_in">begin</span>(), dp.<span class="hljs-built_in">end</span>());<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-2"><a href="#Complexity-Analysis-2" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(n^2)$</p></li><li><p><strong>Space Complexity:</strong> $O(n)$</p></li></ul><hr><h1 id="4-Longest-Arithmetic-Subsequence"><a href="#4-Longest-Arithmetic-Subsequence" class="headerlink" title="4. Longest Arithmetic Subsequence"></a>4. Longest Arithmetic Subsequence</h1><h2 id="Question-Description-2"><a href="#Question-Description-2" class="headerlink" title="Question Description"></a>Question Description</h2><p>Given an integer array $arr$ and an integer difference, find and return the length of the longest arithmetic subsequence in $arr$ where the difference between adjacent elements is equal to difference.</p><p>A subsequence is a sequence derived from $arr$ by deleting some elements or not deleting any elements without changing the order of the remaining elements.</p><h2 id="Analysis-3"><a href="#Analysis-3" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Longest arithmetic subsequence” is:<br>$$<br>dp(i) &#x3D; max(dp(i),dp(j)+1), \text{ if },arr(i) - arr(j) &#x3D; difference<br>$$<br>We traverse $arr$ from left to right and calculate the length of the longest arithmetic subsequence ending with $arr[i]$, and take the maximum of all lengths to get the answer.</p><p>Let $dp[i]$ represent the length of the longest arithmetic subsequence ending with $arr[i]$. We can find the element on the left side of $arr[i]$ that satisfies $arr[j] &#x3D; arr[i] - d$, and add $arr[i]$ to the end of the longest arithmetic subsequence ending with $arr[j]$.</p><p>In this way, $dp[i]$ can be rescursively calculated from $dp[j]$.</p><p>The final answer is $max(dp)$.</p><h2 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">class</span> <span class="hljs-string">Solution</span> &#123;<br><span class="hljs-attr">public:</span><br>    <span class="hljs-string">int</span> <span class="hljs-string">longestSubsequence(vector&lt;int&gt;&amp;</span> <span class="hljs-string">arr</span>, <span class="hljs-string">int</span> <span class="hljs-string">difference)</span> &#123;<br>        <span class="hljs-string">int</span> <span class="hljs-string">n</span> <span class="hljs-string">=</span> <span class="hljs-string">arr.size();</span><br>        <br>        <span class="hljs-string">//</span> <span class="hljs-string">dp</span>[<span class="hljs-string">i</span>] <span class="hljs-string">stores</span> <span class="hljs-string">the</span> <span class="hljs-string">length</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">longest</span> <span class="hljs-string">arithmetic</span> <span class="hljs-string">subsequence</span><br>        <span class="hljs-string">//</span> <span class="hljs-string">ending</span> <span class="hljs-string">at</span> <span class="hljs-string">index</span> <span class="hljs-string">i</span> <span class="hljs-string">with</span> <span class="hljs-string">the</span> <span class="hljs-string">given</span> <span class="hljs-string">difference</span><br>        <span class="hljs-string">std::vector&lt;int&gt;</span> <span class="hljs-string">dp(n</span>, <span class="hljs-number">1</span><span class="hljs-string">);</span>  <span class="hljs-string">//</span> <span class="hljs-string">Initialize</span> <span class="hljs-string">all</span> <span class="hljs-string">values</span> <span class="hljs-string">to</span> <span class="hljs-number">1</span> <span class="hljs-string">(each</span> <span class="hljs-string">element</span> <span class="hljs-string">is</span> <span class="hljs-string">a</span> <span class="hljs-string">subsequence</span> <span class="hljs-string">of</span> <span class="hljs-string">length</span> <span class="hljs-number">1</span><span class="hljs-string">)</span><br><br>        <span class="hljs-string">//</span> <span class="hljs-string">Iterate</span> <span class="hljs-string">through</span> <span class="hljs-string">each</span> <span class="hljs-string">element</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">array</span><br>        <span class="hljs-string">for</span> <span class="hljs-string">(int</span> <span class="hljs-string">i</span> <span class="hljs-string">=</span> <span class="hljs-number">0</span><span class="hljs-string">;</span> <span class="hljs-string">i</span> <span class="hljs-string">&lt;</span> <span class="hljs-string">n;</span> <span class="hljs-string">i++)</span> &#123;<br>            <span class="hljs-string">//</span> <span class="hljs-string">Check</span> <span class="hljs-string">all</span> <span class="hljs-string">previous</span> <span class="hljs-string">elements</span> <span class="hljs-string">before</span> <span class="hljs-string">i</span><br>            <span class="hljs-string">for</span> <span class="hljs-string">(int</span> <span class="hljs-string">j</span> <span class="hljs-string">=</span> <span class="hljs-number">0</span><span class="hljs-string">;</span> <span class="hljs-string">j</span> <span class="hljs-string">&lt;</span> <span class="hljs-string">i;</span> <span class="hljs-string">j++)</span> &#123;<br>                <span class="hljs-string">//</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">difference</span> <span class="hljs-string">between</span> <span class="hljs-string">arr</span>[<span class="hljs-string">i</span>] <span class="hljs-string">and</span> <span class="hljs-string">arr</span>[<span class="hljs-string">j</span>] <span class="hljs-string">matches</span> <span class="hljs-string">the</span> <span class="hljs-string">target</span><br>                <span class="hljs-string">if</span> <span class="hljs-string">(arr</span>[<span class="hljs-string">i</span>] <span class="hljs-bullet">-</span> <span class="hljs-string">arr</span>[<span class="hljs-string">j</span>] <span class="hljs-string">==</span> <span class="hljs-string">difference)</span> &#123;<br>                    <span class="hljs-string">//</span> <span class="hljs-string">Update</span> <span class="hljs-string">dp</span>[<span class="hljs-string">i</span>] <span class="hljs-string">to</span> <span class="hljs-string">include</span> <span class="hljs-string">this</span> <span class="hljs-string">element</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">arithmetic</span> <span class="hljs-string">subsequence</span><br>                    <span class="hljs-string">dp</span>[<span class="hljs-string">i</span>] <span class="hljs-string">=</span> <span class="hljs-string">std::max(dp</span>[<span class="hljs-string">i</span>], <span class="hljs-string">dp</span>[<span class="hljs-string">j</span>] <span class="hljs-string">+</span> <span class="hljs-number">1</span><span class="hljs-string">);</span><br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-string">//</span> <span class="hljs-string">Return</span> <span class="hljs-string">the</span> <span class="hljs-string">maximum</span> <span class="hljs-string">value</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">dp</span> <span class="hljs-string">array</span>, <span class="hljs-string">which</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">length</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">longest</span> <span class="hljs-string">subsequence</span><br>        <span class="hljs-string">return</span> <span class="hljs-string">*std::max_element(dp.begin()</span>, <span class="hljs-string">dp.end());</span><br>    &#125;<br>&#125;<span class="hljs-string">;</span><br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-3"><a href="#Complexity-Analysis-3" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><strong>Time Complexity:</strong> $O(n^2)$</li><li><strong>Space Complexity:</strong> $O(n)$</li></ul><hr><p>The above code is still to complex, we can use “Hash table method” to simplify the process.</p><p>The cores equation of the following method is :<br>$$<br>dp[num] &#x3D; dp[num - difference] + 1<br>$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestSubsequence</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> difference)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; dp;  <span class="hljs-comment">// dp[val] represents the length of the longest subsequence ending with value &#x27;val&#x27;</span><br>        <span class="hljs-comment">// In this dp map, the key is the number itself, and the value is the length of the subsequence ending at that number</span><br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;  <span class="hljs-comment">// Records the maximum length found</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr) &#123;<br>            <span class="hljs-comment">// The length of the longest subsequence ending with num </span><br>            <span class="hljs-comment">// is equal to the length of the subsequence ending with (num - difference) plus 1</span><br>            dp[num] = dp[num - difference] + <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// Update the maximum length</span><br>            res = <span class="hljs-built_in">max</span>(res, dp[num]);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-4"><a href="#Complexity-Analysis-4" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(n)$</p></li><li><p><strong>Space Complexity:</strong> $O(n)$</p></li></ul><hr><h1 id="5-Longest-Arithmetic-Sequence"><a href="#5-Longest-Arithmetic-Sequence" class="headerlink" title="5. Longest Arithmetic Sequence"></a>5. Longest Arithmetic Sequence</h1><h2 id="Question-Description-3"><a href="#Question-Description-3" class="headerlink" title="Question Description"></a>Question Description</h2><p>Given an integer array $nums$, return the length of the longest arithmetic subsequence in $nums$.</p><p>Recall that a subsequence of $nums$ is a list $nums[i_1],nums[i_2],…,nums[i_k]$, with $0 ≤ i_1 &lt; i_2 &lt; … &lt; i_k ≤ nums.length - 1$. And a sequence $seq$ is arithmetic if the values of $seq[i+1]-seq[i](0 ≤ i &lt; seq.length - 1)$ are all the same.</p><h2 id="Analysis-4"><a href="#Analysis-4" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Longest Arithmetic Sequence” is:<br>$$<br>f[i][d] &#x3D; f[j].count[d] \text{ ? } f[j][d] + 1 : 2<br>$$<br>Note that $f[i][d][num]$ means using the elements in the array $nums$ with subscripts less than or equal to $i$ to construct an arithmetic sequence with a common difference of $d$, and the maximum length of the arithmetic sequence when the last element is $num$.</p><p>When performing state transition, we consider whether to add the current $i$th element as the last item in the arithmetic progression.</p><p>Use an outer loop to enumerate $d$, and in the inner loop, only two state transitions are required:</p><ol><li><p>$$<br>f[nums[i]] \leftarrow f[nums[i] - d] + 1<br>$$</p></li><li><p>$$<br>f[nums[i]] \leftarrow 1<br>$$</p></li></ol><h2 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestArithSeqLength</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-comment">// f[i] is a hashmap where:</span><br>        <span class="hljs-comment">// key: difference d</span><br>        <span class="hljs-comment">// value: the length of the longest arithmetic subsequence ending at index i with difference d</span><br>        vector&lt;unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">f</span>(n);<br><br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;  <span class="hljs-comment">// To keep track of the maximum length found</span><br><br>        <span class="hljs-comment">// Iterate over each element in nums</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-comment">// Check all previous elements before i</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-type">int</span> d = nums[i] - nums[j];  <span class="hljs-comment">// Calculate the common difference</span><br><br>                <span class="hljs-comment">// If there exists a subsequence ending at j with difference d,</span><br>                <span class="hljs-comment">// extend that subsequence by including nums[i]</span><br>                <span class="hljs-comment">// Otherwise, start a new subsequence of length 2 (nums[j], nums[i])</span><br>                f[i][d] = f[j].<span class="hljs-built_in">count</span>(d) ? f[j][d] + <span class="hljs-number">1</span> : <span class="hljs-number">2</span>;<br><br>                <span class="hljs-comment">// Update the answer with the maximum length so far</span><br>                ans = <span class="hljs-built_in">max</span>(ans, f[i][d]);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Return the length of the longest arithmetic subsequence</span><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-5"><a href="#Complexity-Analysis-5" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(n^2)$</p></li><li><p><strong>Space Complexity:</strong> $O(n^2$)</p></li></ul><hr><h1 id="6-Russian-Doll-Envelope-Problem"><a href="#6-Russian-Doll-Envelope-Problem" class="headerlink" title="6. Russian Doll Envelope Problem"></a>6. Russian Doll Envelope Problem</h1><h2 id="Question-Description-4"><a href="#Question-Description-4" class="headerlink" title="Question Description"></a>Question Description</h2><p>Given a two-dimensional integer array $envelopes$, where $envelopes[i] &#x3D; [w_i, h_i]$, represents the width and height of the $i$th envelope.</p><p>When the width and height of another envelope are larger than this envelope can be put into another envelope, just like a Russian doll.</p><p>Please calculate how many envelopes can form a set of “Russian doll” envelopes(that is, one envelope can be put into another envelope).</p><p>Note : Envelope rotation is not allowed.</p><h2 id="Analysis-5"><a href="#Analysis-5" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Russian doll envelope problem” question is:<br>$$<br>f[i] &#x3D; \max_{j&lt;i \land h_j&lt;h_i} { f[j] } + 1<br>$$<br>Following the LIS method, we can also get the below codes.</p><h2 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxEnvelopes</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; envelopes)</span> </span>&#123;<br>        <span class="hljs-comment">// If the envelope array is empty, return 0</span><br>        <span class="hljs-keyword">if</span> (envelopes.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> n = envelopes.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">// Number of envelopes</span><br><br>        <span class="hljs-comment">// Custom sorting:</span><br>        <span class="hljs-comment">// Sort by width in ascending order;</span><br>        <span class="hljs-comment">// If widths are equal, sort by height in descending order</span><br>        <span class="hljs-built_in">sort</span>(envelopes.<span class="hljs-built_in">begin</span>(), envelopes.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; e1, <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; e2) &#123;<br>            <span class="hljs-keyword">return</span> e1[<span class="hljs-number">0</span>] &lt; e2[<span class="hljs-number">0</span>] || (e1[<span class="hljs-number">0</span>] == e2[<span class="hljs-number">0</span>] &amp;&amp; e1[<span class="hljs-number">1</span>] &gt; e2[<span class="hljs-number">1</span>]);<br>        &#125;);<br><br>        <span class="hljs-comment">// Initialize dp array:</span><br>        <span class="hljs-comment">// f[i] represents the maximum number of envelopes that can be nested ending at envelope i</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">f</span><span class="hljs-params">(n, <span class="hljs-number">1</span>)</span></span>; <span class="hljs-comment">// Each envelope can at least nest itself</span><br><br>        <span class="hljs-comment">// Double loop to enumerate all pairs (i, j)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-comment">// If the height of envelope i is greater than that of envelope j</span><br>                <span class="hljs-comment">// Then envelope j can be nested into envelope i</span><br>                <span class="hljs-keyword">if</span> (envelopes[i][<span class="hljs-number">1</span>] &gt; envelopes[j][<span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-comment">// Update the maximum nested count ending at envelope i</span><br>                    f[i] = <span class="hljs-built_in">max</span>(f[i], f[j] + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// The result is the maximum value in the dp array</span><br>        <span class="hljs-keyword">return</span> *<span class="hljs-built_in">max_element</span>(f.<span class="hljs-built_in">begin</span>(), f.<span class="hljs-built_in">end</span>());<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-6"><a href="#Complexity-Analysis-6" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><strong>Time Complexity:</strong> $O(n^2)$</li><li><strong>Space Complexity:</strong> $O(n)$</li></ul><hr><p>However, the above code is too complex, so that we can consider “Dynamic programming based on binary search”.</p><p>Let $f[j]$ represent the minimum value of the last element of the longest strictly increasing subsequence of length $j$ that can be formed by the first $i$ elements of $h$. If there is no longest strictly increasing subsequence of length $j$, the corresponding $f$ value is undefined.</p><p>Within the defined range, it can be seen that the $f$ value is strictly monotonically increasing, because the longer the subsequence, the larger the last element.</p><p>When performing state transition, we consider the current element $h$:</p><ol><li><p>If $h_i$ is greater than the maximum value in $f$, then $h_i$ can be connected to the maximum value in $f$ to form a longer strictly increasing subsequence;</p></li><li><p>Otherwise, we find the largest element in $f[j_0]$ in $f$ that is strictly smaller than $h_i$,that is $f[j_0] &lt; h_i ≤ f[j_0 + 1]$, then $h_i$ can be connected after $f[j_0]$ to form a strictly increasing subsequence of length $j$. So $f[j_0 + 1]$ need to be updated :<br>$$<br>f[j_0 + 1] &#x3D; h_i<br>$$</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">class</span> <span class="hljs-string">Solution</span> &#123;<br><span class="hljs-attr">public:</span><br>    <span class="hljs-string">int</span> <span class="hljs-string">maxEnvelopes(vector&lt;vector&lt;int&gt;&gt;&amp;</span> <span class="hljs-string">envelopes)</span> &#123;<br>        <span class="hljs-string">int</span> <span class="hljs-string">n</span> <span class="hljs-string">=</span> <span class="hljs-string">envelopes.size();</span><br><br>        <span class="hljs-string">//</span> <span class="hljs-attr">Sort the envelopes:</span><br>        <span class="hljs-string">//</span> <span class="hljs-string">First</span> <span class="hljs-string">by</span> <span class="hljs-string">width</span> <span class="hljs-string">in</span> <span class="hljs-string">ascending</span> <span class="hljs-string">order;</span><br>        <span class="hljs-string">//</span> <span class="hljs-string">If</span> <span class="hljs-string">widths</span> <span class="hljs-string">are</span> <span class="hljs-string">equal</span>, <span class="hljs-string">by</span> <span class="hljs-string">height</span> <span class="hljs-string">in</span> <span class="hljs-string">descending</span> <span class="hljs-string">order</span><br>        <span class="hljs-string">sort(envelopes.begin()</span>, <span class="hljs-string">envelopes.end()</span>, []<span class="hljs-string">(const</span> <span class="hljs-string">auto&amp;</span> <span class="hljs-string">e1</span>, <span class="hljs-string">const</span> <span class="hljs-string">auto&amp;</span> <span class="hljs-string">e2)</span> &#123;<br>            <span class="hljs-string">return</span> <span class="hljs-string">e1</span>[<span class="hljs-number">0</span>] <span class="hljs-string">&lt;</span> <span class="hljs-string">e2</span>[<span class="hljs-number">0</span>] <span class="hljs-string">||</span> <span class="hljs-string">(e1</span>[<span class="hljs-number">0</span>] <span class="hljs-string">==</span> <span class="hljs-string">e2</span>[<span class="hljs-number">0</span>] <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">e1</span>[<span class="hljs-number">1</span>] <span class="hljs-string">&gt;</span> <span class="hljs-string">e2</span>[<span class="hljs-number">1</span>]<span class="hljs-string">);</span><br>        &#125;<span class="hljs-string">);</span><br><br>        <span class="hljs-string">//</span> <span class="hljs-string">Initialize</span> <span class="hljs-string">the</span> <span class="hljs-string">dp</span> <span class="hljs-string">array</span> <span class="hljs-string">for</span> <span class="hljs-string">heights</span><br>        <span class="hljs-string">//</span> <span class="hljs-string">f</span>[<span class="hljs-string">i</span>] <span class="hljs-string">will</span> <span class="hljs-string">maintain</span> <span class="hljs-string">the</span> <span class="hljs-string">minimum</span> <span class="hljs-string">possible</span> <span class="hljs-string">tail</span> <span class="hljs-string">value</span> <span class="hljs-string">for</span> <span class="hljs-string">an</span> <span class="hljs-string">increasing</span> <span class="hljs-string">subsequence</span> <span class="hljs-string">of</span> <span class="hljs-string">length</span> <span class="hljs-string">(i</span> <span class="hljs-string">+</span> <span class="hljs-number">1</span><span class="hljs-string">)</span><br>        <span class="hljs-string">vector&lt;int&gt;</span> <span class="hljs-string">f</span> <span class="hljs-string">=</span> &#123;<span class="hljs-string">envelopes</span>[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]&#125;<span class="hljs-string">;</span> <span class="hljs-string">//</span> <span class="hljs-string">Start</span> <span class="hljs-string">with</span> <span class="hljs-string">the</span> <span class="hljs-string">height</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">first</span> <span class="hljs-string">envelope</span><br><br>        <span class="hljs-string">//</span> <span class="hljs-string">Iterate</span> <span class="hljs-string">through</span> <span class="hljs-string">each</span> <span class="hljs-string">envelope</span><br>        <span class="hljs-string">for</span> <span class="hljs-string">(int</span> <span class="hljs-string">i</span> <span class="hljs-string">=</span> <span class="hljs-number">0</span><span class="hljs-string">;</span> <span class="hljs-string">i</span> <span class="hljs-string">&lt;</span> <span class="hljs-string">n;</span> <span class="hljs-string">i++)</span> &#123;<br>            <span class="hljs-string">int</span> <span class="hljs-string">num</span> <span class="hljs-string">=</span> <span class="hljs-string">envelopes</span>[<span class="hljs-string">i</span>][<span class="hljs-number">1</span>]<span class="hljs-string">;</span> <span class="hljs-string">//</span> <span class="hljs-string">Current</span> <span class="hljs-string">envelope&#x27;s</span> <span class="hljs-string">height</span><br><br>            <span class="hljs-string">//</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">current</span> <span class="hljs-string">height</span> <span class="hljs-string">is</span> <span class="hljs-string">larger</span> <span class="hljs-string">than</span> <span class="hljs-string">any</span> <span class="hljs-string">seen</span> <span class="hljs-string">so</span> <span class="hljs-string">far</span>, <span class="hljs-string">extend</span> <span class="hljs-string">the</span> <span class="hljs-string">subsequence</span><br>            <span class="hljs-string">if</span> <span class="hljs-string">(num</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">f.back())</span> &#123;<br>                <span class="hljs-string">f.push_back(num);</span><br>            &#125;<br>            <span class="hljs-string">else</span> &#123;<br>                <span class="hljs-string">//</span> <span class="hljs-string">Otherwise</span>, <span class="hljs-string">find</span> <span class="hljs-string">the</span> <span class="hljs-string">first</span> <span class="hljs-string">element</span> <span class="hljs-string">in</span> <span class="hljs-string">f</span> <span class="hljs-string">that</span> <span class="hljs-string">is</span> <span class="hljs-string">greater</span> <span class="hljs-string">than</span> <span class="hljs-string">or</span> <span class="hljs-string">equal</span> <span class="hljs-string">to</span> <span class="hljs-string">num</span> <span class="hljs-string">and</span> <span class="hljs-string">replace</span> <span class="hljs-string">it</span><br>                <span class="hljs-string">//</span> <span class="hljs-string">This</span> <span class="hljs-string">keeps</span> <span class="hljs-string">the</span> <span class="hljs-string">subsequence</span> <span class="hljs-string">optimal</span> <span class="hljs-string">for</span> <span class="hljs-string">future</span> <span class="hljs-string">extensions</span><br>                <span class="hljs-string">auto</span> <span class="hljs-string">it</span> <span class="hljs-string">=</span> <span class="hljs-string">lower_bound(f.begin()</span>, <span class="hljs-string">f.end()</span>, <span class="hljs-string">num);</span><br>                <span class="hljs-string">*it</span> <span class="hljs-string">=</span> <span class="hljs-string">num;</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-string">//</span> <span class="hljs-string">The</span> <span class="hljs-string">size</span> <span class="hljs-string">of</span> <span class="hljs-string">f</span> <span class="hljs-string">represents</span> <span class="hljs-string">the</span> <span class="hljs-string">length</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">longest</span> <span class="hljs-string">increasing</span> <span class="hljs-string">subsequence</span>,<br>        <span class="hljs-string">//</span> <span class="hljs-string">which</span> <span class="hljs-string">corresponds</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">maximum</span> <span class="hljs-string">number</span> <span class="hljs-string">of</span> <span class="hljs-string">envelopes</span> <span class="hljs-string">that</span> <span class="hljs-string">can</span> <span class="hljs-string">be</span> <span class="hljs-string">nested</span><br>        <span class="hljs-string">return</span> <span class="hljs-string">f.size();</span><br>    &#125;<br>&#125;<span class="hljs-string">;</span><br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-7"><a href="#Complexity-Analysis-7" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><strong>Time Complexity:</strong> $O(nlogn)$</li><li><strong>Space Complexity:</strong> $O(n)$</li></ul><hr><h1 id="7-Find-the-Longest-Valid-Obstacle-Course-to-Each-Position"><a href="#7-Find-the-Longest-Valid-Obstacle-Course-to-Each-Position" class="headerlink" title="7. Find the Longest Valid Obstacle Course to Each Position"></a>7. Find the Longest Valid Obstacle Course to Each Position</h1><h2 id="Question-Description-5"><a href="#Question-Description-5" class="headerlink" title="Question Description"></a>Question Description</h2><p>You are planning to build some obstacle courses. You are given an array of integers named obstacles with length $n$ and starting at index 0, where $obstacles[i]$ is the height of the $i$th obstacle.</p><p>For each index $i$ between $0$ and $n-1$(inclusive), find the length of the longest obstacle course that can be constructed with $obstacles$, provided that:</p><ul><li>You can choose any number of obstacles with indices between $0$ and $i$, inclusive.</li><li>The $i$th obstacle must be included in the course.</li><li>You must place the obstacles in the order they appear in obstacles.</li><li>Except for the first obstacle, each obstacle in the course must be the same height as or taller than the previous one.</li></ul><p>Return an answer array $ans$ of length $n$, where $ans[i]$ is the length of the longest obstacle course for index $i$ as described above.</p><h2 id="Analysis-6"><a href="#Analysis-6" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Find the longest valid obstacle curse to each position” question is:<br>$$<br>dp(i) &#x3D; max(dp(i),dp(j+1)), \text{ if }, obstacles[i] &gt;&#x3D; obstacles[j]<br>$$<br>Following the LIS method, we can also get the below codes.</p><h2 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">longestObstacleCourseAtEachPosition</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; obstacles)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = obstacles.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-comment">// Initialize the dp array,</span><br>        <span class="hljs-comment">// where dp[i] represents the length of the longest valid obstacle course ending at index i</span><br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n, <span class="hljs-number">1</span>)</span></span>;  <span class="hljs-comment">// Initially, each obstacle can form a sequence of length 1 by itself</span><br><br>        <span class="hljs-comment">// Iterate through each obstacle position i</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-comment">// Check all previous obstacle positions j (j &lt; i)</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-comment">// If obstacles[i] &gt;= obstacles[j],</span><br>                <span class="hljs-comment">// it means we can extend the sequence from j to i (non-decreasing height)</span><br>                <span class="hljs-keyword">if</span> (obstacles[i] &gt;= obstacles[j]) &#123;<br>                    <span class="hljs-comment">// Update dp[i]: take the maximum between the current dp[i] and dp[j] + 1</span><br>                    <span class="hljs-comment">// Meaning we can form a longer valid course ending at i by extending from j</span><br>                    dp[i] = std::<span class="hljs-built_in">max</span>(dp[i], dp[j] + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Return the dp array,</span><br>        <span class="hljs-comment">// where each dp[i] indicates the length of the longest valid obstacle course up to position i</span><br>        <span class="hljs-keyword">return</span> dp;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-8"><a href="#Complexity-Analysis-8" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><strong>Time Complexity:</strong> $O(n^2)$</li><li><strong>Space Complexity:</strong> $O(n)$</li></ul><hr><p>However, the LIS method cost too much time, so that we need to simplify the code.</p><p>The we can consider “Greed + Binary Search” mode.</p><h3 id="Algorithm-Idea"><a href="#Algorithm-Idea" class="headerlink" title="Algorithm Idea"></a>Algorithm Idea</h3><ul><li>We use a <strong>greedy + binary search</strong> approach.</li><li>Maintain a list <code>f</code> where:<ul><li><code>f[i]</code> represents the <strong>smallest possible last height</strong> of a valid obstacle course of length <code>i+1</code>.</li></ul></li><li>For each obstacle:<ul><li>If its height is <strong>greater than or equal to</strong> the last element in <code>f</code>, append it to extend the sequence.</li><li>Otherwise, use <strong>binary search (<code>upper_bound</code>)</strong> to find the first element greater than <code>num</code>, and replace it to maintain a minimal end value.</li></ul></li></ul><blockquote><p>This is a modified version of the classical Longest Increasing Subsequence (LIS) algorithm, adapted for non-decreasing sequences.</p></blockquote><h3 id="Algorithm-Steps"><a href="#Algorithm-Steps" class="headerlink" title="Algorithm Steps"></a>Algorithm Steps</h3><ol><li><strong>Initialization</strong>:<ul><li>Create array <code>f</code> and add the first obstacle’s height.</li><li>Create answer array <code>ans</code> and initialize with 1.</li></ul></li><li><strong>Iterate through obstacles (starting from index 1)</strong>:<ul><li>For each <code>num = obstacles[i]</code>:<ul><li>If <code>num &gt;= f.back()</code>:<ul><li>Append <code>num</code> to <code>f</code>.</li><li>Update <code>ans[i] = length of f</code>.</li></ul></li><li>Else:<ul><li>Use <code>upper_bound</code> in <code>f</code> to find the first element greater than <code>num</code>.</li><li>Replace that element with <code>num</code>.</li><li>Update <code>ans[i] = position of replacement + 1</code>.</li></ul></li></ul></li></ul></li><li><strong>Return the <code>ans</code> array</strong>.</li></ol><h2 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">longestObstacleCourseAtEachPosition</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; obstacles)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = obstacles.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-comment">// The array &#x27;f&#x27; maintains the minimal ending elements of valid obstacle courses</span><br>        <span class="hljs-comment">// f[i] represents the minimum possible last height of a valid course of length (i + 1)</span><br>        std::vector&lt;<span class="hljs-type">int</span>&gt; f = &#123;obstacles[<span class="hljs-number">0</span>]&#125;;  <br><br>        <span class="hljs-comment">// The array &#x27;ans&#x27; records the length of the longest valid obstacle course at each position</span><br>        std::vector&lt;<span class="hljs-type">int</span>&gt; ans = &#123;<span class="hljs-number">1</span>&#125;;<br><br>        <span class="hljs-comment">// Start traversing from the first index (index 0 is already handled)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> num = obstacles[i];  <span class="hljs-comment">// Current obstacle height</span><br><br>            <span class="hljs-comment">// If the current obstacle height is greater than or equal to the last element of f,</span><br>            <span class="hljs-comment">// it can directly extend the current longest course</span><br>            <span class="hljs-keyword">if</span> (num &gt;= f.<span class="hljs-built_in">back</span>()) &#123;<br>                f.<span class="hljs-built_in">push_back</span>(num);<br>                ans.<span class="hljs-built_in">push_back</span>(f.<span class="hljs-built_in">size</span>());  <span class="hljs-comment">// The new course length after adding</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// Otherwise, find the first element in f that is greater than num</span><br>                <span class="hljs-comment">// Replace it with num to maintain the minimal ending values</span><br>                <span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">upper_bound</span>(f.<span class="hljs-built_in">begin</span>(), f.<span class="hljs-built_in">end</span>(), num);<br>                *it = num;<br><br>                <span class="hljs-comment">// The course length at this position is the index of the replaced element + 1</span><br>                <span class="hljs-type">int</span> loc = it - f.<span class="hljs-built_in">begin</span>();<br>                ans.<span class="hljs-built_in">push_back</span>(loc + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Return the array representing the longest valid obstacle course length at each position</span><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-9"><a href="#Complexity-Analysis-9" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><strong>Time Complexity:</strong> $O(nlogn)$</li><li><strong>Space Complexity:</strong> $O(n)$</li></ul><hr><h1 id="Common-Deployment-Commands"><a href="#Common-Deployment-Commands" class="headerlink" title="Common Deployment Commands"></a>Common Deployment Commands</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs bash">hexo clean <span class="hljs-comment"># Clear cache</span><br>hexo g <span class="hljs-comment"># Generate static files</span><br>hexo d <span class="hljs-comment"># Deploy to GitHub</span><br></code></pre></div></td></tr></table></figure><hr><p>📬If you have any questions, please contact me:<br>📧 <code>cy2102056@gmail.com</code></p>]]></content>
      
      
      <categories>
          
          <category> C++ Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dynamic Programming(5)---Longest Common Subsequence</title>
      <link href="/2025/04/29/Dynamic%20Programming(5)---Longest%20common%20subsequence/"/>
      <url>/2025/04/29/Dynamic%20Programming(5)---Longest%20common%20subsequence/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="✨-Overview-of-the-Programming-Content"><a href="#✨-Overview-of-the-Programming-Content" class="headerlink" title="✨ Overview of the Programming Content"></a>✨ Overview of the Programming Content</h1><ol><li>Longest common subsequence;</li><li>Non-intersecting lines;</li><li>Minimum number of insertions to make a string a palindrome;</li></ol><p>Recommended editing tool: **Typora **(Markdown editing) </p><hr><h1 id="1-Longest-Common-Sequence"><a href="#1-Longest-Common-Sequence" class="headerlink" title="1. Longest Common Sequence"></a>1. Longest Common Sequence</h1><p>Given two strings $text_1$ and $text_2$, return the length of the longest common subsequence of the two strings. If there is no common subsequences, return 0.</p><p>A subsequence of a string is a new string that is formed by deleting some characters(or none) from the original string without changing the relative order of the characters.</p><p>For example, “ace” is a subsequence of “abcde”, but “aec” is not a subsequence of “abcde”. A common subsequence of two strings is a subsequence that the two strings have in common.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Longest common sequence” question is:<br>$$<br>dp[i][j]&#x3D;<br>\begin{cases}<br>dp[i-1][j-1] + 1,&amp; text_1[i-1] &#x3D; text_2[j-1]\\<br>max(dp[i-1][j],dp[i][j-1]),&amp;text_1[i-1] ≠ text_2[j-1]<br>\end{cases}<br>$$<br>The longest common subsequence problem is a typical two-dimensional dynamic programming problem.</p><p>Assume that the lengths of the strings $text_1$ and $text_2$ are $m$ and $n$ respectively, create a two-dimensional array $dp$ with $m+1$ rows and $n+1$ columns, where $dp[i][j]$ represents the length of the longest common subsequence of $text_1 [0:i]$ and $text_2 [0:j]$.</p><p>In the above representation, $text_1[0:i]$ represents the prefix of $text_1$ with length $i$ and $text_2[0:j]$ represents the prefix of $text_2$ with length $j$.</p><p>Consider the edge case of dynamic programming：<br>$$<br>\begin{cases}<br>dp[0][j] &#x3D; 0,&amp; \text{while  } i &#x3D; 0 \text{  and  } 0 ≤ j ≤ n\\<br>dp[i][0] &#x3D; 0,&amp; \text{while  } j &#x3D; 0 \text{  and  } 0 ≤ i ≤ n<br>\end{cases}<br>$$</p><h4 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h4><p>Why we use “$text_1[i-1] &#x3D; text_2[j-1]$” but not “$text_1[i] &#x3D; text_2[j]$”?</p><p>The character $dp[i][j]$ represents the longest common subsequence of the first $i$ characters of $text_1$ and the first $j$ characters of $text_2$.</p><p>For example, $dp[i][1]$ represents the relationship between $text_1[0]$ and $text_2[0]$.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">The overall idea of this problem is very standard:</span><br><span class="hljs-comment">1. First consider dp[0][0]</span><br><span class="hljs-comment">2. Then handle the case where i = 0 or j = 0</span><br><span class="hljs-comment">3. Then compute for i &gt; 0 &amp;&amp; j &gt; 0</span><br><span class="hljs-comment">   (1) If characters are equal</span><br><span class="hljs-comment">   (2) If characters are not equal</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestCommonSubsequence</span><span class="hljs-params">(string text1, string text2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m = text<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = text<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-comment">// Create a (m+1) x (n+1) 2D dynamic programming array, initialized to 0</span><br>        <span class="hljs-comment">// dp[i][j] represents the length of the longest common subsequence</span><br>        <span class="hljs-comment">// between the first i characters of text1 and the first j characters of text2</span><br>        std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(m<span class="hljs-number">+1</span>, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n<span class="hljs-number">+1</span>));<br><br>        <span class="hljs-comment">// Initialize the first column (LCS length of any string with an empty string is 0)</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; i++) &#123;<br>            dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Initialize the first row (LCS length of an empty string with any string is also 0)</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= n; j++) &#123;<br>            dp[<span class="hljs-number">0</span>][j] = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Fill in the DP table</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>                <span class="hljs-comment">// If the current characters match, LCS can be extended by 1 from the previous state</span><br>                <span class="hljs-keyword">if</span>(text1[i - <span class="hljs-number">1</span>] == text2[j - <span class="hljs-number">1</span>]) &#123;<br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// Otherwise, take the maximum from the two possible previous states</span><br>                    dp[i][j] = std::<span class="hljs-built_in">max</span>(dp[i][j - <span class="hljs-number">1</span>], dp[i - <span class="hljs-number">1</span>][j]);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Return the LCS length of the full strings</span><br>        <span class="hljs-keyword">return</span> dp[m][n];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis"><a href="#Complexity-Analysis" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(m \times n)$</p></li><li><p><strong>Space Complexity:</strong> $O(m \times n)$</p></li></ul><hr><h1 id="2-Non-intersecting-lines"><a href="#2-Non-intersecting-lines" class="headerlink" title="2. Non-intersecting lines"></a>2. Non-intersecting lines</h1><h2 id="Question-Description"><a href="#Question-Description" class="headerlink" title="Question Description"></a>Question Description</h2><p>Write the integers in $nums_1$ and $nums_2$ in the given order on two separate horizontal lines.</p><p>Now, we can draw lines connecting two numbers $nums_1[i]$ and $nums_2[j]$, where</p><ul><li>$nums_1[i] &#x3D;&#x3D; nums_2[j]$;</li><li>and the lines do not intersect any other lines (not horizontal lines).</li></ul><p>Note that lines cannot intersect even at their endpoints : each number can belong to only one line.</p><p>Draw lines in this way and return the maximum number of lines that can be drawn.</p><h2 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Non-intersecting lines” question is:<br>$$<br>dp[i][j]&#x3D;<br>\begin{cases}<br>dp[i-1][j-1] + 1,&amp; text_1[i-1] &#x3D; text_2[j-1]\\<br>max(dp[i-1][j],dp[i][j-1]),&amp;text_1[i-1] ≠ text_2[j-1]<br>\end{cases}<br>$$<br>Actually ,the question “Longest common sequence” and “Non-intersecting lines” question are the same one. </p><p>Once you realize this problem, you can solve it in the same way.</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxUncrossedLines</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m = nums<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = nums<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-comment">// Create a 2D DP table of size (m+1) x (n+1), initialized to 0</span><br>        <span class="hljs-comment">// dp[i][j] represents the maximum number of uncrossed lines</span><br>        <span class="hljs-comment">// between the first i elements of nums1 and the first j elements of nums2</span><br>        std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(m + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br><br>        <span class="hljs-comment">// Fill the DP table</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>                <span class="hljs-comment">// If the current elements match, we can draw a line connecting them</span><br>                <span class="hljs-keyword">if</span> (nums1[i - <span class="hljs-number">1</span>] == nums2[j - <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-comment">// Add 1 to the result from the previous subproblem (diagonal cell)</span><br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// Otherwise, take the maximum from skipping one element</span><br>                    <span class="hljs-comment">// either from nums1 or from nums2</span><br>                    dp[i][j] = <span class="hljs-built_in">max</span>(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// The result is in the bottom-right cell of the DP table</span><br>        <span class="hljs-keyword">return</span> dp[m][n];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-1"><a href="#Complexity-Analysis-1" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(m \times n)$</p></li><li><p><strong>Space Complexity:</strong> $O(m \times n)$</p></li></ul><hr><h1 id="3-Minimum-Number-of-Insertions-Required-to-Make-a-String-a-Palindrome"><a href="#3-Minimum-Number-of-Insertions-Required-to-Make-a-String-a-Palindrome" class="headerlink" title="3. Minimum Number of Insertions Required to Make a String a Palindrome"></a>3. Minimum Number of Insertions Required to Make a String a Palindrome</h1><h2 id="Question-Description-1"><a href="#Question-Description-1" class="headerlink" title="Question Description"></a>Question Description</h2><p>Given a string $s$, you can insert any character at any position in the string with each operation.</p><p>Please return the minimum number of operations required to make $s$ a palindrome.</p><p>A palindrome is a string that is the same when read forwards and backwards.</p><h2 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Minimum Number of Intersections Required to Make a String a Palindrome” is :</p><p>Minimum Number of Intersections &#x3D; String length - Longest common subsequence with reversed string</p><p>So that this problem is the variations of the longest common subsequence problem.</p><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Core idea of this problem:</span><br><span class="hljs-comment">Find the length L of the Longest Palindromic Subsequence (LPS) in the string s.</span><br><span class="hljs-comment">The minimum number of insertions required = original string length n - L</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minInsertions</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-comment">// Construct the reversed version of string s</span><br>        <span class="hljs-function">string <span class="hljs-title">t</span><span class="hljs-params">(s.rbegin(), s.rend())</span></span>;<br><br>        <span class="hljs-comment">// Define a 2D dynamic programming array dp</span><br>        <span class="hljs-comment">// dp[i][j] represents the length of the Longest Common Subsequence (LCS)</span><br>        <span class="hljs-comment">// between the first i characters of s and the first j characters of t</span><br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(n + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n + <span class="hljs-number">1</span>),<span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">// Fill the dp array</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>                <span class="hljs-comment">// Inherit the maximum value from the left or top (when characters don&#x27;t match)</span><br>                dp[i][j] = <span class="hljs-built_in">max</span>(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]);<br><br>                <span class="hljs-comment">// If characters match, update with the value from top-left + 1</span><br>                <span class="hljs-keyword">if</span> (s[i - <span class="hljs-number">1</span>] == t[j - <span class="hljs-number">1</span>]) &#123;<br>                    dp[i][j] = <span class="hljs-built_in">max</span>(dp[i][j], dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Minimum number of insertions = original string length - length of LPS</span><br>        <span class="hljs-keyword">return</span> n - dp[n][n];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-2"><a href="#Complexity-Analysis-2" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(n^2)$</p></li><li><p><strong>Space Complexity:</strong> $O(n^2)$</p></li></ul><hr><h1 id="Common-Deployment-Commands"><a href="#Common-Deployment-Commands" class="headerlink" title="Common Deployment Commands"></a>Common Deployment Commands</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs bash">hexo clean <span class="hljs-comment"># Clear cache</span><br>hexo g <span class="hljs-comment"># Generate static files</span><br>hexo d <span class="hljs-comment"># Deploy to GitHub</span><br></code></pre></div></td></tr></table></figure><hr><p>📬If you have any questions, please contact me:<br>📧 <code>cy2102056@gmail.com</code></p>]]></content>
      
      
      <categories>
          
          <category> C++ Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dynamic Programming(3)---Application of Dynamic Programming in Strings</title>
      <link href="/2025/04/26/Dynamic%20Programming(3)---Application%20of%20Dynamic%20Programming%20in%20Strings/"/>
      <url>/2025/04/26/Dynamic%20Programming(3)---Application%20of%20Dynamic%20Programming%20in%20Strings/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="✨-Overview-of-the-Programming-Content"><a href="#✨-Overview-of-the-Programming-Content" class="headerlink" title="✨ Overview of the Programming Content"></a>✨ Overview of the Programming Content</h1><ol><li>Longest palindrome substring;</li><li>Word splitting;</li><li>Longest palindrome subsequence;</li><li>Edit distance;</li><li>Minimum ASCII deletion sum of two strings;</li><li>Distinct subsequences;</li></ol><p>Recommended editing tool: **Typora **(Markdown editing) </p><hr><h1 id="1-Longest-Palindrome-Substring"><a href="#1-Longest-Palindrome-Substring" class="headerlink" title="1. Longest Palindrome Substring"></a>1. Longest Palindrome Substring</h1><p>Given a string s, find the longest palindrome substring in ‘s’.</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Longest palindrome substring” question is:<br>$$<br>P(i,j) &#x3D; P(i+1,j-1) \land (S_i &#x3D; S_j)<br>$$<br>The boundary conditions:<br>$$<br>P(i,i) &#x3D;<br>\begin{cases}<br>true,&amp; \text{1-letter substrings are palindromes}\\<br>S_i &#x3D; S_{i+1},&amp;\text{2-letter substrings are palindromes if both letters are equal}<br>\end{cases}<br>$$<br>We use $P(i,j)$ to indicates whether the string consisting of letters ‘$i$’ to ‘$j$’ of string ‘$s$’ (hereinafter represented as $s[i:j]$ is a palindrome):<br>$$<br>P(i,j)&#x3D;<br>\begin{cases}<br>true,&amp; \text{if the substring Si to Sj is a palindrome}\\<br>false,&amp;\text{other cases}<br>\end{cases}<br>$$<br>There are two possibilities in the ‘other cases’:</p><ol><li>$s[i,j]$ is not a palindrome;</li><li>$i &gt; j$, now $s[i,j]$ is illegal;</li></ol><p>The answer is $dp[m][n]$.</p><h4 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h4><p>In the state transfer equation, we transfer from a shorter string to a longer string, so we must pay attention to the loop order of dynamic programming.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-comment">// Handle short strings: return the string directly if it&#x27;s length &lt; 2</span><br>        <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> s;<br>        &#125;<br><br>        <span class="hljs-type">int</span> maxlen = <span class="hljs-number">1</span>;  <span class="hljs-comment">// The length of the longest palindromic substring found so far</span><br>        <span class="hljs-type">int</span> begin = <span class="hljs-number">0</span>;   <span class="hljs-comment">// The starting index of the longest palindromic substring</span><br><br>        std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(n, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n));<br>        <span class="hljs-comment">// Use dp[i][j] to represent whether s[i...j] is a palindrome</span><br>        <span class="hljs-comment">// dp[i][i] = 1; // single characters are palindromes</span><br>        <span class="hljs-comment">// for (int i = 0; i &lt; n; i++) &#123;</span><br>        <span class="hljs-comment">//     dp[i][i] = 1;</span><br>        <span class="hljs-comment">// &#125;</span><br><br>        <span class="hljs-comment">// Enumerate substring lengths from 2 to n</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> L = <span class="hljs-number">2</span>; L &lt;= n; L++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                <span class="hljs-type">int</span> j = L + i - <span class="hljs-number">1</span>;  <span class="hljs-comment">// Calculate the end index j</span><br>                <span class="hljs-keyword">if</span> (j &gt; n - <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// Skip if out of bounds</span><br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (s[i] != s[j]) &#123;<br>                    dp[i][j] = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// Characters at both ends are different — not a palindrome</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (j - i &lt; <span class="hljs-number">3</span>) &#123;<br>                        dp[i][j] = <span class="hljs-number">1</span>;  <span class="hljs-comment">// Substrings of length 2 or 3 with equal ends are palindromes</span><br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        dp[i][j] = dp[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];  <span class="hljs-comment">// Check if the inner substring is a palindrome</span><br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-comment">// If this substring is a palindrome and longer than the previously recorded one</span><br>                <span class="hljs-keyword">if</span> (dp[i][j] == <span class="hljs-literal">true</span> &amp;&amp; j - i + <span class="hljs-number">1</span> &gt; maxlen) &#123;<br>                    maxlen = j - i + <span class="hljs-number">1</span>;<br>                    begin = i;  <span class="hljs-comment">// Update the longest palindrome info</span><br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Return the longest palindromic substring</span><br>        <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substr</span>(begin, maxlen);<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis"><a href="#Complexity-Analysis" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(n^2)$</p></li><li><p><strong>Space Complexity:</strong> $O(n^2)$</p></li></ul><hr><h1 id="2-Word-Splitting"><a href="#2-Word-Splitting" class="headerlink" title="2. Word Splitting"></a>2. Word Splitting</h1><h2 id="Question-Description"><a href="#Question-Description" class="headerlink" title="Question Description"></a>Question Description</h2><p>Given a string $’s’$ and a list of strings $’wordDict’$ as a dictionary. Return true if ‘$s$’ can be concatenated using one or more words in the dictionary.</p><p>Note: It is not required that all words in the dictionary be used, and words in the dictionary can be reused.</p><h2 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Word Splitting” question is:<br>$$<br>dp[i] &#x3D; dp[j] \quad \land \quad \text{check}(s[j..i-1])<br>$$<br>In the above equation, $\text{check}(s[j..i-1])$ represent substring $\text{s[j..i-1]}$ whether is in the dictionary.</p><p>For the boundary cases, we can define $dp[0] &#x3D; true$ to represent  an empty string and is legal.</p><p>We can set $f$ to decide whether to split. The code use $true$ to represent $yes$ and use $false$ to represent $no$.</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">wordBreak</span><span class="hljs-params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-comment">// Use a hash set for fast lookup of words in the dictionary</span><br>        <span class="hljs-function">unordered_set&lt;string&gt; <span class="hljs-title">words</span><span class="hljs-params">(wordDict.begin(), wordDict.end())</span></span>;<br><br>        <span class="hljs-comment">// f[i] indicates whether s[0..i-1] can be segmented into words from the dictionary</span><br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">f</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>)</span></span>;<br><br>        <span class="hljs-comment">// Empty string is always segmentable</span><br>        f[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-comment">// Iterate through the string from position 0 to n</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-comment">// Check all possible partitions ending at i</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>                <span class="hljs-comment">// If s[0..j-1] can be segmented and s[j..i-1] is in the dictionary</span><br>                <span class="hljs-keyword">if</span> (f[j] == <span class="hljs-literal">true</span> &amp;&amp; words.<span class="hljs-built_in">count</span>(s.<span class="hljs-built_in">substr</span>(j, i - j))) &#123;<br>                    f[i] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// Then s[0..i-1] can also be segmented</span><br>                    <span class="hljs-keyword">break</span>;       <span class="hljs-comment">// No need to check further partitions for this i</span><br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Return whether the entire string s[0..n-1] can be segmented</span><br>        <span class="hljs-keyword">return</span> f[n];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-1"><a href="#Complexity-Analysis-1" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(n^3)$</p></li><li><p><strong>Space Complexity:</strong> $O(m + n)$</p></li></ul><hr><h1 id="3-Longest-Palindrome-Subsequence"><a href="#3-Longest-Palindrome-Subsequence" class="headerlink" title="3. Longest Palindrome Subsequence"></a>3. Longest Palindrome Subsequence</h1><h2 id="Question-Description-1"><a href="#Question-Description-1" class="headerlink" title="Question Description"></a>Question Description</h2><p>Given a string ‘$s$’, find the longest palindrome subsequence in it and return the length of the subsequence.</p><p>A subsequence is defined as a sequence formed by deleting some characters or not deleting any characters without changing the order of the remaining characters.</p><h2 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Longest palindrome subsequence” is<br>$$<br>dp(i,j)&#x3D;<br>\begin{cases}<br>dp(i+1,j-1) + 2,&amp; \text{s(i) &#x3D; s(j)}\\<br>max(dp(i+1,j),dp(i,j-1)),&amp;\text{s(i) ≠ s(j)}<br>\end{cases}<br>$$</p><h4 id="Boundary-Conditions"><a href="#Boundary-Conditions" class="headerlink" title="Boundary Conditions"></a>Boundary Conditions</h4><p>$$<br>dp(i,i) &#x3D; 1<br>$$</p><p>The above equation means ‘any single character can be considered a palindrome’. </p><p>Note: From bottom to top, from left to right, inverted triangle structure design code. </p><p>The final answer is $dp(0,n-1)$.</p><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestPalindromeSubseq</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-comment">// dp[i][j] represents the length of the longest palindromic subsequence in s[i..j]</span><br>        std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(n, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n, <span class="hljs-number">0</span>));<br><br>        <span class="hljs-comment">// Every single character is a palindrome of length 1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            dp[i][i] = <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Fill the DP table in a bottom-up manner</span><br>        <span class="hljs-comment">// Start from the bottom row and go up (i from n-1 to 0)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-comment">// j starts from i+1 to ensure dp[i+1][j-1] is valid (upper triangle)</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (s[i] == s[j]) &#123;<br>                    <span class="hljs-comment">// Characters at both ends match, extend the inner palindrome by 2</span><br>                    dp[i][j] = dp[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">2</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// Otherwise, take the maximum from either dropping s[i] or s[j]</span><br>                    dp[i][j] = std::<span class="hljs-built_in">max</span>(dp[i + <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// The result is the longest palindromic subsequence in the entire string s[0..n-1]</span><br>        <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][n - <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-2"><a href="#Complexity-Analysis-2" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(n^2)$</p></li><li><p><strong>Space Complexity:</strong> $O(n^2)$</p></li></ul><hr><h1 id="4-Edit-Distance"><a href="#4-Edit-Distance" class="headerlink" title="4. Edit Distance"></a>4. Edit Distance</h1><h2 id="Question-Description-2"><a href="#Question-Description-2" class="headerlink" title="Question Description"></a>Question Description</h2><p>Given two words ‘$word1$’ and ‘$word2$’, please return the minimum number of operations required to convert ‘$word1$’ and ‘$word2$’.</p><p>You can perform the following three operations on a word:</p><ol><li>Insert a character;</li><li>Delete a character;</li><li>Replace a character;</li></ol><h2 id="Analysis-3"><a href="#Analysis-3" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Edit Distance” is:<br>$$<br>dp[i][j]&#x3D;<br>\begin{cases}<br>min(dp[i][j-1]+1,dp[i-1][j]+1,dp[i-1][j-1]),&amp; \text{word1[i-1] &#x3D; word2[j-1]}\\<br>1+min(dp[i][j-1],dp[i-1][j],dp[i-1][j-1]),&amp;\text{word1[i-1] ≠ word2[j-1]}<br>\end{cases}<br>$$<br>We use $dp[i][j]$ to denote the edit distance between the first $i$ letters of A and the first $j$ letters of B.</p><p>Once we have the values of $dp[i][j-1]$, $dp[i-1][j]$ and $dp[i-1][j-1]$, we can calculate $dp[i][j]$.</p><ol><li>$dp[i][j-1]$ is a subproblem of the edit distance between the first $i$ characters of  A and the first $j-1$ characters of B. That is, for the $j$th character of B, we add a same character at the end of A, then $dp[i][j]$ can be as small as $dp[i][j-1] + 1$.</li><li>$dp[i-1][j]$ is a subproblem of the edit distance between the first $i-1$ characters of  A and the first $j$ characters of B. That is, for the $i$th character of A, we add a same character at the end of B, then $dp[i][j]$ can be as small as $dp[i-1][j] + 1$.</li><li>$dp[i-1][j-1]$ is a subproblem of the edit distance between the first $i-1$ characters of  A and the first $j-1$ characters of B. That is, for the $j$th character of B, we modify the $i$th character of A to make the two same, then $dp[i][j]$ can be as small as $dp[i-1][j-1] + 1$. In particular, if the $i$th character of A the the $j$th character of B are originally the same, then we actually do not need to modify them. In this case, $dp[i][j]$ can be as small as $dp[i-1][j-1]$.</li></ol><h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><ol><li>Note that the definition of $dp[i][j]$ is the distance from $word1[0…i-1]$ to $word2[0…j-1]$. So to determine whether the last bit is equal, you must compare $word1[i-1]$ $&#x3D;$ $word2[j-1]$.</li><li>Note that the size of $dp$ is set to $(m+1) \times (n+1)$ because the possibility of an empty set needs to be taken into account. The $n$ in the loop can be replaced by $n+1$.</li></ol><h2 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minDistance</span><span class="hljs-params">(string word1, string word2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = word<span class="hljs-number">1.l</span>ength();  <span class="hljs-comment">// Length of word1</span><br>        <span class="hljs-type">int</span> m = word<span class="hljs-number">2.l</span>ength();  <span class="hljs-comment">// Length of word2</span><br><br>        <span class="hljs-comment">// If either string is empty, return the length of the other string (all insertions or deletions)</span><br>        <span class="hljs-keyword">if</span> (n * m == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> n + m;  <span class="hljs-comment">// Corrected: should be n + m instead of n * m</span><br>        &#125;<br><br>        <span class="hljs-comment">// Create the DP table, D[i][j] represents the minimum edit distance between</span><br>        <span class="hljs-comment">// the first i characters of word1 and the first j characters of word2</span><br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">D</span>(n + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m + <span class="hljs-number">1</span>));<br><br>        <span class="hljs-comment">// Initialize the first column: converting the first i characters of word1 to an empty string needs i deletions</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>            D[i][<span class="hljs-number">0</span>] = i;<br>        &#125;<br><br>        <span class="hljs-comment">// Initialize the first row: converting an empty string to the first j characters of word2 needs j insertions</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= m; j++) &#123;<br>            D[<span class="hljs-number">0</span>][j] = j;<br>        &#125;<br><br>        <span class="hljs-comment">// Fill the DP table</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>                <span class="hljs-type">int</span> left = D[i - <span class="hljs-number">1</span>][j] + <span class="hljs-number">1</span>;        <span class="hljs-comment">// Deletion</span><br>                <span class="hljs-type">int</span> down = D[i][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;        <span class="hljs-comment">// Insertion</span><br>                <span class="hljs-type">int</span> left_down = D[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];   <span class="hljs-comment">// Replacement</span><br><br>                <span class="hljs-comment">// If current characters are not equal, add 1 to the replacement cost</span><br>                <span class="hljs-keyword">if</span> (word1[i - <span class="hljs-number">1</span>] != word2[j - <span class="hljs-number">1</span>]) &#123;<br>                    left_down += <span class="hljs-number">1</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// Take the minimum of the three operations</span><br>                D[i][j] = <span class="hljs-built_in">min</span>(left, <span class="hljs-built_in">min</span>(down, left_down));<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Return the minimum edit distance between word1 and word2</span><br>        <span class="hljs-keyword">return</span> D[n][m];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-3"><a href="#Complexity-Analysis-3" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(n \times m)$</p></li><li><p><strong>Space Complexity:</strong> $O(n \times m)$</p></li></ul><hr><h1 id="5-Minimum-ASCII-Deletion-Sum-of-Two-Strings"><a href="#5-Minimum-ASCII-Deletion-Sum-of-Two-Strings" class="headerlink" title="5. Minimum ASCII Deletion Sum of Two Strings"></a>5. Minimum ASCII Deletion Sum of Two Strings</h1><h2 id="Question-Description-3"><a href="#Question-Description-3" class="headerlink" title="Question Description"></a>Question Description</h2><p>Given two string $s1$ and $s2$, return the minimum sum of the ASCII values of the characters that need to be deleted to make the two strings equal.</p><h2 id="Analysis-4"><a href="#Analysis-4" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Edit Distance” is:<br>$$<br>dp[i][j]&#x3D;<br>\begin{cases}<br>dp[i-1][j-1],&amp; \text{s1[i-1] &#x3D; s2[j-1]}\\<br>min(dp[i-1][j]+s1[i-1],dp[i][j-1]+s2[j-1]),&amp;\text{s1[i-1] ≠ s2[j-1]}<br>\end{cases}<br>$$<br>To get the minimum ASCII delete sum that makes $s1[0:i]$ and $s2[0:j]$ the same, we should take the smaller of the two, so $dp[i][j] &#x3D; min(dp[i-1][j] + s1[i-1],dp[i][j-1] + s2[j-1])$. </p><p>The boundary cases:</p><ol><li><p>If $i &#x3D; j &#x3D; 0$:<br>$$<br>dp[0][0] &#x3D; 0<br>$$</p></li><li><p>If $i &#x3D; 0$ and $j &gt; 0$,<br>$$<br>dp[0][j] &#x3D; dp[0][j-1] + s2[j-1], 1 ≤ j ≤ n<br>$$</p></li><li><p>If $j &#x3D; 0$ and $i &gt; 0$,<br>$$<br>dp[i][0] &#x3D; dp[i-1][0] + s1[i-1]，1 ≤ i ≤ n<br>$$</p></li></ol><h2 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minimumDeleteSum</span><span class="hljs-params">(string s1, string s2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m = s<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>();  <span class="hljs-comment">// Length of s1</span><br>        <span class="hljs-type">int</span> n = s<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>();  <span class="hljs-comment">// Length of s2</span><br><br>        <span class="hljs-comment">// Define a 2D dp array where dp[i][j] represents the minimum sum of ASCII values </span><br>        <span class="hljs-comment">// to delete in order to make the first i characters of s1 and first j characters of s2 equal</span><br>        std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(m + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br><br>        <span class="hljs-comment">// Initialize the first column: delete all first i characters of s1 (s2 is an empty string)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>            dp[i][<span class="hljs-number">0</span>] = dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + s1[i - <span class="hljs-number">1</span>];  <span class="hljs-comment">// Delete s1[i - 1], accumulate ASCII value</span><br>        &#125;<br><br>        <span class="hljs-comment">// Initialize the first row: delete all first j characters of s2 (s1 is an empty string)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>            dp[<span class="hljs-number">0</span>][j] = dp[<span class="hljs-number">0</span>][j - <span class="hljs-number">1</span>] + s2[j - <span class="hljs-number">1</span>];  <span class="hljs-comment">// Delete s2[j - 1], accumulate ASCII value</span><br>        &#125;<br><br>        <span class="hljs-comment">// Fill the DP table</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (s1[i - <span class="hljs-number">1</span>] == s2[j - <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-comment">// If current characters are equal, no deletion needed, inherit previous state</span><br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// If characters are different, delete one of them and choose the minimal cost</span><br>                    dp[i][j] = std::<span class="hljs-built_in">min</span>(<br>                        dp[i - <span class="hljs-number">1</span>][j] + s1[i - <span class="hljs-number">1</span>],  <span class="hljs-comment">// Delete s1[i - 1]</span><br>                        dp[i][j - <span class="hljs-number">1</span>] + s2[j - <span class="hljs-number">1</span>]   <span class="hljs-comment">// Delete s2[j - 1]</span><br>                    );<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Return the minimum total ASCII sum required to make both strings equal</span><br>        <span class="hljs-keyword">return</span> dp[m][n];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-4"><a href="#Complexity-Analysis-4" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(n \times m)$</p></li><li><p><strong>Space Complexity:</strong> $O(n \times m)$</p></li></ul><hr><h1 id="6-Distinct-Subsequences"><a href="#6-Distinct-Subsequences" class="headerlink" title="6. Distinct Subsequences"></a>6. Distinct Subsequences</h1><h2 id="Question-Description-4"><a href="#Question-Description-4" class="headerlink" title="Question Description"></a>Question Description</h2><p>Given two strings ‘$s$’ and ‘$t$’, count and return the number of occurrences of ‘$t$’ in the subsequences of ‘$s$’.</p><p>The test cases ensures that the result is within the range of a 32-bit signed integer.</p><h2 id="Analysis-5"><a href="#Analysis-5" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Distinct Subsequences” question is:<br>$$<br>dp(i,j) &#x3D;<br>\begin{cases}<br>dp[i+1][j+1] + dp[i+1][j],&amp; \text{s[i] &#x3D; t[j]}\\<br>dp[i+1][j],&amp;\text{s[i] ≠ t[j]}<br>\end{cases}<br>$$<br>$dp[i][j]$ represents the number of occurrences of $t[j:]$ in the subsequences of $s[i:]$.</p><p>In the above representation, $s[i:]$ represents the substring of $s$ from subscript $i$ to the end, and $t[j:]$ represents the substring of $t$ from subscript $j$ to the end.</p><p>The boundary cases:</p><ol><li><p>If $j &#x3D; n$, $t[j:]$ is empty, so that:<br>$$<br>dp[i][n] &#x3D; 1 , 0 ≤ i ≤ m<br>$$</p></li><li><p>If $i &#x3D; m$ and $j &lt; n$, $s[i:]$ is empty while $t[j:]$ is not empty:<br>$$<br>dp[m][j] &#x3D; 0, 0 ≤ j ≤ n<br>$$</p></li></ol><h4 id="Note-1"><a href="#Note-1" class="headerlink" title="Note"></a>Note</h4><p>Tips to remember:</p><p>If you define ‘prefix to the $i$th character’ $\rightarrow$ remember to use $i-1$ index;</p><p>If you define ‘suffix starting from the $i$th position’$\rightarrow$ use $i$ directly.</p><p>In prefix form, we define:</p><p>$dp[i][j]$ means using the prefix of $s[0…i-1]$ and $t[0…j-1]$. So the comparison is: $s[i-1]$ and $t[j-1]$.</p><p>In suffix form, we define:</p><p>$dp[i][j]$ means using the suffix of $s[i:]$ and $t[j:]$. So the comparison is： $s[i]$ and $t[j]$.</p><h2 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-comment">// Suffix Style (Reverse DP Traversal)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numDistinct</span><span class="hljs-params">(string s, string t)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m = s.<span class="hljs-built_in">size</span>();  <span class="hljs-comment">// Length of source string s</span><br>        <span class="hljs-type">int</span> n = t.<span class="hljs-built_in">size</span>();  <span class="hljs-comment">// Length of target string t</span><br><br>        <span class="hljs-comment">// If s is shorter than t, it&#x27;s impossible to form t by deleting characters from s</span><br>        <span class="hljs-keyword">if</span> (m &lt; n) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// dp[i][j] represents the number of distinct subsequences in s[i:] that equal t[j:]</span><br>        <span class="hljs-comment">// Here, s[i:] means the substring of s starting from index i to the end,</span><br>        <span class="hljs-comment">// and t[j:] means the substring of t from index j to the end</span><br>        std::vector&lt;std::vector&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt;&gt; <span class="hljs-built_in">dp</span>(m + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt;(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br><br>        <span class="hljs-comment">// Initialization: if t[j:] is an empty string (j == n), there is one way to match it from any s[i:] — skip everything</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; i++) &#123;<br>            dp[i][n] = <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Traverse s[i:] and t[j:] in reverse, filling the DP table from back to front</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = m - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>                <span class="hljs-keyword">if</span> (s[i] == t[j]) &#123;<br>                    <span class="hljs-comment">// If characters match: </span><br>                    <span class="hljs-comment">// either match them (dp[i+1][j+1]) or skip s[i] (dp[i+1][j])</span><br>                    dp[i][j] = dp[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] + dp[i + <span class="hljs-number">1</span>][j];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// If characters don&#x27;t match: skip s[i] and continue matching t[j:]</span><br>                    dp[i][j] = dp[i + <span class="hljs-number">1</span>][j];<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// dp[0][0] gives the number of ways to match the full s with the full t</span><br>        <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;;<br><br><br><br><br><span class="hljs-comment">// Prefix Style (Forward DP Traversal)</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numDistinct</span><span class="hljs-params">(string s, string t)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = t.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-comment">// If s is shorter than t, it&#x27;s impossible to form t</span><br>        <span class="hljs-keyword">if</span> (m &lt; n) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// dp[i][j] represents the number of distinct subsequences in s[0..i-1] that equal t[0..j-1]</span><br>        std::vector&lt;std::vector&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt;&gt; <span class="hljs-built_in">dp</span>(m + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt;(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br><br>        <span class="hljs-comment">// Initialization: there is exactly one way to form an empty t from any prefix of s — by deleting all characters</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; i++) &#123;<br>            dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Initialization: there is no way to form a non-empty t from an empty s</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>            dp[<span class="hljs-number">0</span>][j] = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Fill the DP table in forward order</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (s[i - <span class="hljs-number">1</span>] == t[j - <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-comment">// If current characters match:</span><br>                    <span class="hljs-comment">// 1. Use the match (dp[i-1][j-1])</span><br>                    <span class="hljs-comment">// 2. Or skip s[i-1] (dp[i-1][j])</span><br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + dp[i - <span class="hljs-number">1</span>][j];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// Characters don’t match: skip s[i-1]</span><br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dp[m][n];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-5"><a href="#Complexity-Analysis-5" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><strong>Time Complexity:</strong> $O(m \times n)$</li><li><strong>Space Complexity:</strong> $O(m \times n)$</li></ul><hr><h1 id="Common-Deployment-Commands"><a href="#Common-Deployment-Commands" class="headerlink" title="Common Deployment Commands"></a>Common Deployment Commands</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs bash">hexo clean <span class="hljs-comment"># Clear cache</span><br>hexo g <span class="hljs-comment"># Generate static files</span><br>hexo d <span class="hljs-comment"># Deploy to GitHub</span><br></code></pre></div></td></tr></table></figure><hr><p>📬If you have any questions, please contact me:<br>📧 <code>cy2102056@gmail.com</code></p>]]></content>
      
      
      <categories>
          
          <category> C++ Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dynamic Programming(2)---Matrix Types</title>
      <link href="/2025/04/16/Dynamic%20Programming(2)---Matrix%20Types/"/>
      <url>/2025/04/16/Dynamic%20Programming(2)---Matrix%20Types/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="✨-Overview-of-the-Programming-Content"><a href="#✨-Overview-of-the-Programming-Content" class="headerlink" title="✨ Overview of the Programming Content"></a>✨ Overview of the Programming Content</h1><ol><li>Different paths;</li><li>Minimum path sum;</li><li>Different path II;</li><li>Minimum path sum of triangle;</li><li>Minimum sum of descending path;</li><li>Maximum square;</li></ol><p>Recommended editing tool: **Typora **(Markdown editing) </p><hr><h1 id="1-Different-Paths"><a href="#1-Different-Paths" class="headerlink" title="1. Different Paths"></a>1. Different Paths</h1><h2 id="Question-Description"><a href="#Question-Description" class="headerlink" title="Question Description:"></a>Question Description:</h2><p>A robot is located at the top left corner of an $m \times n$ grid(the starting point is marked as “Start” in the figure below);</p><p>The robot can only move one step down or one step to the right at a time. The robot tires to reach the bottom right corner of the grid(marked as “Finish” in the figure below).</p><p>How many different paths are there in total?</p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Different paths” question is:<br>$$<br>f(i,j) &#x3D; f(i-1,j) + f(i,j-1)<br>$$<br>We can use $f(i,j)$ to represent the number of different paths from the top left corner to the end, while the range of $i$ is $[0,m)$ and $j$ is $[0,n)$.</p><p>While we can  only move one step downward go or to the right, if you want to reach location $(i,j)$, you can move one step downward from $(i-1,j)$ or move one step to the right from $(i,j-1)$.</p><p>Therefore, the number of paths to reach position $(i,j)$ is the sum of the number of paths above.</p><p>In programming, we should consider the conditions including $i &#x3D; 0$ as $f(i-1,j)$ and $f(i,j-1)$.</p><p>Initial condition is $f(0,0) &#x3D; 1$, which means move from top left corner to top left corner.</p><p>The final answer is $f(m-1,n-1)$.</p><h4 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h4><p>To facilitate code writing, we can set all $f(0,j)$ and $f(i,0)$ as boundary conditions, and their values are all 1.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-comment">// Dynamic Programming</span><br><span class="hljs-comment">// Core formula: f[i][j] = f[i-1][j] + f[i][j-1]</span><br><span class="hljs-comment">// Meaning of the formula: to reach position (i, j), you can only come from the left f[i][j-1] or from above f[i-1][j]</span><br><span class="hljs-comment">// So the number of paths to (i, j) is the sum of the number of paths from the left and from above</span><br><span class="hljs-comment">// Purpose of std:: </span><br><span class="hljs-comment">// All classes, functions, and objects in the C++ Standard Library (like vector, string, cout, endl, etc.) </span><br><span class="hljs-comment">// are in the std namespace to:</span><br><span class="hljs-comment">// Avoid naming conflicts with user-defined names.</span><br><span class="hljs-comment">// Make it clear that these features come from the standard library.</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">uniquePaths</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-comment">// Create an m x n matrix f, with all initial values set to 1</span><br>        <span class="hljs-comment">// f[i][j] represents the number of unique paths from the start (0, 0) to position (i, j)</span><br>        std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">f</span>(m, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n, <span class="hljs-number">1</span>));<br><br>        <span class="hljs-comment">// Use dynamic programming to calculate the number of paths</span><br>        <span class="hljs-comment">// Start from (1,1) because for (i,0) and (0,j), there is only one path (either always go right or always go down)</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++)&#123;<br>                <span class="hljs-comment">// State transition equation:</span><br>                <span class="hljs-comment">// Number of paths to (i, j) = paths from above (i-1, j) + paths from the left (i, j-1)</span><br>                f[i][j] = f[i - <span class="hljs-number">1</span>][j] + f[i][j<span class="hljs-number">-1</span>];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Return the number of paths to the destination (m-1, n-1)</span><br>        <span class="hljs-keyword">return</span> f[m<span class="hljs-number">-1</span>][n<span class="hljs-number">-1</span>];<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">// Combinatorial solution</span><br><span class="hljs-comment">class Solution &#123;</span><br><span class="hljs-comment">public:</span><br><span class="hljs-comment">    int uniquePaths(int m, int n) &#123;</span><br><span class="hljs-comment">        long long ans = 1;</span><br><span class="hljs-comment">        for(int x = n, y = 1; y &lt; m; x++, y++)&#123;</span><br><span class="hljs-comment">            ans = ans * x / y;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        return ans;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis"><a href="#Complexity-Analysis" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(m \times n)$</p></li><li><p><strong>Space Complexity:</strong> $O(m \times n)$</p></li></ul><hr><h1 id="2-Minimum-Path-Sum"><a href="#2-Minimum-Path-Sum" class="headerlink" title="2. Minimum Path Sum"></a>2. Minimum Path Sum</h1><h2 id="Question-Description-1"><a href="#Question-Description-1" class="headerlink" title="Question Description"></a>Question Description</h2><p>Given an $m \times n$ grid containing non-negative integers, find a path from the upper left corner to the lower right corner so that the sum of the numbers on the path is the smallest.</p><p>Note: You can only move down or right one step at a time.</p><h2 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Minimum Path Sum” question is:<br>$$<br>f(i,j) &#x3D; grid(i,j) + min(f(i-1,j),f(i,j-1))<br>$$<br>We use $f(i,j)$ to represent the minimum path sum at location $(i,j)$. The above equation means the minimum path sum of position $(i,j)$ is equal to the minimum path sum of the previous position plus the value of position $(i,j)$.</p><p>However, we should consider the boundary conditions including the first row and the first column.</p><p>For this question, we should divide it into three different conditions:</p><ol><li>If $i &gt; 0$ and $j &#x3D; 0$, $f(i,0) &#x3D; f(i-1,0) + grid(i,0)$;</li><li>If $i &#x3D; 0$ and $j &gt; 0$, $f(0,j) &#x3D; f(0,j-1) + grid(0,j)$;</li><li>If $i &gt; 0$ and $j &gt; 0$, $f(i,j) &#x3D; grid(i,j) + min(f(i-1,j),f(i,j-1))$;</li></ol><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minPathSum</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m = grid.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">// Number of rows</span><br>        <span class="hljs-type">int</span> n = grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(); <span class="hljs-comment">// Number of columns</span><br>        std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">f</span>(m, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n, <span class="hljs-number">0</span>));<br><br>        <span class="hljs-comment">// Initialize the starting point</span><br>        f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = grid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br><br>        <span class="hljs-comment">// Initialize the first column</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) &#123;<br>            f[i][<span class="hljs-number">0</span>] = grid[i][<span class="hljs-number">0</span>] + f[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]; <br>        &#125;<br><br>        <span class="hljs-comment">// Initialize the first row</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>            f[<span class="hljs-number">0</span>][j] = grid[<span class="hljs-number">0</span>][j] + f[<span class="hljs-number">0</span>][j - <span class="hljs-number">1</span>];<br>        &#125;<br><br>        <span class="hljs-comment">// Core DP formula for the remaining cells: </span><br>        <span class="hljs-comment">// f(i, j) = grid(i, j) + min(f(i - 1, j), f(i, j - 1))</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>                f[i][j] = grid[i][j] + <span class="hljs-built_in">min</span>(f[i - <span class="hljs-number">1</span>][j], f[i][j - <span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> f[m - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;;<br><br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-1"><a href="#Complexity-Analysis-1" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(m \times n)$</p></li><li><p><strong>Space Complexity:</strong> $O(m \times n)$</p></li></ul><hr><h1 id="3-Different-Path-II"><a href="#3-Different-Path-II" class="headerlink" title="3. Different Path II;"></a>3. Different Path II;</h1><h2 id="Question-Description-2"><a href="#Question-Description-2" class="headerlink" title="Question Description"></a>Question Description</h2><p>Given an “$m \times n$” integer array $grid$. A robot is initially located at the upper left corner(i.e. $grid[0][0]$). The robot attempts to move to the lower right corner(i.e. $grid[m-1][n-1]$). The robot can only move one step down or one step to the right at a time.</p><p>Obstacles and empty positions in the $grid$ are represented by 1 and 0 respectively. The robot’s movement path cannot contain any squares with obstacles.</p><p>Return the number of different paths that the robot can take to reach the lower right corner.</p><h2 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Different Paths II” is<br>$$<br>f(i,j)&#x3D;<br>\begin{cases}<br>0,&amp; \text{if obstacleGrid[i][j] &#x3D; 1}\\<br>f(i-1,j) + f(i,j-1),&amp;\text{if obstacleGrid[i][j] &#x3D; 0}<br>\end{cases}<br>$$<br>We use $f(i,j)$ to represent the total number of paths from coordinate $(0,0)$ to coordinate $(i,j)$.</p><p>The above equation means: if there is an obstacle, there is no path that can get to this location.</p><p>However, if there is no obstacle, the total number of paths in location $(i,j)$ is equal to the sum of location $(i-1,j)$ and $(i,j-1)$.</p><p>What’s more, we should consider two special conditions: the first rows and the first columns.</p><p>All in all, we can summary three equations as follows:</p><ol><li><p>if $i&gt;0$ and $j &#x3D; 0$ , we can get<br>$$<br>f(i,0)&#x3D;<br>\begin{cases}<br>break, &amp; \text{if obstacleGrid[i][0] &#x3D; 1}\\<br>1,&amp;\text{if obstacleGrid[i][0] &#x3D; 0}<br>\end{cases}<br>$$</p></li><li><p>if $i &#x3D; 0$ and $j &gt; 0$, we can get<br>$$<br>f(0,j)&#x3D;<br>\begin{cases}<br>break, &amp; \text{if obstacleGrid[0][j] &#x3D; 1}\\<br>1,&amp;\text{if obstacleGrid[0][j] &#x3D; 0}<br>\end{cases}<br>$$</p></li><li><p>if $i &gt; 0$ and $j &gt; 0$, we can get<br>$$<br>f(i,j)&#x3D;<br>\begin{cases}<br>0,&amp; \text{if obstacleGrid[i][j] &#x3D; 1}\\<br>f(i-1,j) + f(i,j-1),&amp;\text{if obstacleGrid[i][j] &#x3D; 0}<br>\end{cases}<br>$$</p></li></ol><h4 id="Boundary-Conditions"><a href="#Boundary-Conditions" class="headerlink" title="Boundary Conditions"></a>Boundary Conditions</h4><p>$$<br>f(0,0)&#x3D;<br>\begin{cases}<br>0, &amp; \text{if obstacleGrid[0][0] &#x3D; 1}\\<br>1,&amp;\text{if obstacleGrid[0][0] &#x3D; 0}<br>\end{cases}<br>$$</p><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">uniquePathsWithObstacles</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(obstacleGrid.<span class="hljs-built_in">empty</span>())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> m = obstacleGrid.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = obstacleGrid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br><br>        std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">f</span>(m, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n, <span class="hljs-number">0</span>));<br>        <br>        <span class="hljs-comment">// If the starting cell has an obstacle, there&#x27;s no path</span><br>        <span class="hljs-keyword">if</span>(obstacleGrid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        &#125;<br>        <br>        <span class="hljs-comment">// Initialize the first column</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++)&#123;<br>            <span class="hljs-keyword">if</span>(obstacleGrid[i][<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">// Stop initializing further if an obstacle is encountered</span><br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                f[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Initialize the first row</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++)&#123;<br>            <span class="hljs-keyword">if</span>(obstacleGrid[<span class="hljs-number">0</span>][j] == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">// Stop initializing further if an obstacle is encountered</span><br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                f[<span class="hljs-number">0</span>][j] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Fill the rest of the DP table</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++)&#123;<br>                <span class="hljs-keyword">if</span>(obstacleGrid[i][j] == <span class="hljs-number">1</span>)&#123;<br>                    f[i][j] = <span class="hljs-number">0</span>; <span class="hljs-comment">// If there&#x27;s an obstacle, no path to this cell</span><br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    f[i][j] = f[i - <span class="hljs-number">1</span>][j] + f[i][j - <span class="hljs-number">1</span>]; <span class="hljs-comment">// Sum of paths from the top and left</span><br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> f[m - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>]; <span class="hljs-comment">// Return the number of unique paths to the bottom-right cell</span><br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-2"><a href="#Complexity-Analysis-2" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(m \times n)$</p></li><li><p><strong>Space Complexity:</strong> $O(m \times n)$</p></li></ul><hr><h1 id="4-Minimum-Path-Sum-of-Triangle"><a href="#4-Minimum-Path-Sum-of-Triangle" class="headerlink" title="4. Minimum Path Sum of Triangle"></a>4. Minimum Path Sum of Triangle</h1><h2 id="Question-Description-3"><a href="#Question-Description-3" class="headerlink" title="Question Description"></a>Question Description</h2><p>Given a triangle matrix, find the minimum path sum from top to bottom.</p><p>Each step can only move to adjacent nodes in the next row. Adjacent node means the two nodes which have the same subscripts as the previous node or equal to the subscript of the previous node +1. That is if you are at subscript $i$ in the current row, then the next step can move to subscript $i$ or $i-1$ in the next row.</p><h2 id="Analysis-3"><a href="#Analysis-3" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core idea of “Minimum Path” problem is “from the bottom to the top”.</p><p>The core equation of “The Minimum Path of the Triangle” is:<br>$$<br>dp(i,j) &#x3D; triangle(i,j) + min(dp(j),dp(j+1))<br>$$<br>Calculate the path sum from the second to last line, and make sure the data of each iteration is not polluted.</p><h2 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-comment">// Bottom-up dynamic programming to solve the triangle minimum path sum problem</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minimumTotal</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; triangle)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m = triangle.<span class="hljs-built_in">size</span>();  <span class="hljs-comment">// Get the total number of rows in the triangle</span><br><br>        <span class="hljs-comment">// Initialize the dp array with the last row of the triangle</span><br>        <span class="hljs-comment">// dp[j] represents the minimum path sum from index j to the bottom</span><br>        vector&lt;<span class="hljs-type">int</span>&gt; dp = triangle.<span class="hljs-built_in">back</span>();<br><br>        <span class="hljs-comment">// Traverse from the second last row upward</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = m - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-comment">// Traverse each element in the current row</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; triangle[i].<span class="hljs-built_in">size</span>(); j++) &#123;<br>                <span class="hljs-comment">// Minimum path sum at current point = current value + min of two adjacent paths in the row below</span><br>                dp[j] = triangle[i][j] + <span class="hljs-built_in">min</span>(dp[j], dp[j + <span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// dp[0] contains the minimum path sum from the top to the bottom</span><br>        <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-3"><a href="#Complexity-Analysis-3" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(n^2)$</p></li><li><p><strong>Space Complexity:</strong> $O(n)$</p></li></ul><hr><h1 id="5-Minimum-Sum-of-Descending-Path"><a href="#5-Minimum-Sum-of-Descending-Path" class="headerlink" title="5. Minimum Sum of Descending Path;"></a>5. Minimum Sum of Descending Path;</h1><h2 id="Question-Description-4"><a href="#Question-Description-4" class="headerlink" title="Question Description"></a>Question Description</h2><p>Give you an $n \times n$ square array of integers matrix, find and return the minimum sum of a descending path through the matrix.</p><p>The descending path can start from any element in the first row and select an element from each row. The element selected int the next row is at most one column away from the element selected in the current row(i.e. the first element directly below or diagonally to the left or right). Specifically, the next element at position $(row, col)$ should be $(row+1,col-1)$,$(row + 1, col)$, or $(row + 1, col + 1)$.</p><h2 id="Analysis-4"><a href="#Analysis-4" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “The Minimum Sum of Descending Paths” is<br>$$<br>dp(i,j) &#x3D; matrix(i,j) + min(dp(j-1),dp(j),dp(j+1))<br>$$<br>However, $j-1$ and $j + 1$ must stay within the matrix boundaries.</p><p>From the above words, we should divide this problem into three different conditions:</p><ol><li>If $j &#x3D; 0$, we get $dp(i,j) &#x3D; matrix(i,j) + min(dp(j),dp(j+1))$;</li><li>If $j &#x3D; n-1$, we get $dp(i,j) &#x3D; matrix(i,j) + min(dp(j-1),dp(j))$;</li><li>If $0 &lt; j &lt; n-1$, we get $dp(i,j) &#x3D; matrix(i,j) + min(dp(j-1),dp(j),dp(j+1))$;</li></ol><p>We solve the problem using a bottom-up approach.</p><p>Then the final answer $res &#x3D; min(dp)$ .</p><h2 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minFallingPathSum</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = matrix.<span class="hljs-built_in">size</span>();  <span class="hljs-comment">// Get the number of rows in the matrix (same as number of columns, since it&#x27;s n x n)</span><br><br>        <span class="hljs-comment">// Initialize the dp array with the last row of the matrix</span><br>        <span class="hljs-comment">// dp[j] represents the minimum path sum from position j to the bottom</span><br>        vector&lt;<span class="hljs-type">int</span>&gt; dp = matrix.<span class="hljs-built_in">back</span>();<br><br>        <span class="hljs-comment">// Process from the second-last row upwards</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">new_dp</span><span class="hljs-params">(n)</span></span>;  <span class="hljs-comment">// Used to store the minimum path sum for the current row</span><br><br>            <span class="hljs-comment">// Traverse each column in the current row</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// First column: can only move down or down-right</span><br>                    new_dp[j] = matrix[i][j] + <span class="hljs-built_in">min</span>(dp[j], dp[j + <span class="hljs-number">1</span>]);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == n - <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-comment">// Last column: can only move down or down-left</span><br>                    new_dp[j] = matrix[i][j] + <span class="hljs-built_in">min</span>(dp[j], dp[j - <span class="hljs-number">1</span>]);<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// Middle columns: can move down-left, straight down, or down-right</span><br>                    new_dp[j] = matrix[i][j] + <span class="hljs-built_in">min</span>(dp[j - <span class="hljs-number">1</span>], <span class="hljs-built_in">min</span>(dp[j], dp[j + <span class="hljs-number">1</span>]));<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// Update dp for the next iteration</span><br>            dp = new_dp;<br>        &#125;<br><br>        <span class="hljs-comment">// The final answer is the minimum value in the top row (i.e., dp after processing all rows)</span><br>        <span class="hljs-type">int</span> res = dp[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>            res = <span class="hljs-built_in">min</span>(res, dp[j]);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-4"><a href="#Complexity-Analysis-4" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(n^2)$</p></li><li><p><strong>Space Complexity:</strong> $O(n)$</p></li></ul><hr><h1 id="6-Maximum-Square"><a href="#6-Maximum-Square" class="headerlink" title="6. Maximum Square"></a>6. Maximum Square</h1><h2 id="Question-Description-5"><a href="#Question-Description-5" class="headerlink" title="Question Description"></a>Question Description</h2><p>In a 2D matrix of ‘0’ and ‘1’, find the largest square containing only ‘1’ and return its area.</p><h2 id="Analysis-5"><a href="#Analysis-5" class="headerlink" title="Analysis"></a>Analysis</h2><p>The core equation of “Maximum Square” question is:<br>$$<br>dp(i,j) &#x3D; min(dp(i-1,j),dp(i-1,j-1),dp(i,j-1)) + 1<br>$$<br>In this question, there are three different conditions.</p><ol><li><p>If $i &gt; 0$ and $j &#x3D; 0$ , we can get<br>$$<br>dp(i,0)&#x3D;<br>\begin{cases}<br>0, &amp; \text{if obstacleGrid[i][0] &#x3D; 0}\\<br>1,&amp;\text{if obstacleGrid[i][0] &#x3D; 1}<br>\end{cases}<br>$$</p></li><li><p>If $i &#x3D; 0$ and $j &gt; 0$, we can get<br>$$<br>dp(0,j)&#x3D;<br>\begin{cases}<br>0, &amp; \text{if obstacleGrid[0][j] &#x3D; 0}\\<br>1,&amp;\text{if obstacleGrid[0][j] &#x3D; 1}<br>\end{cases}<br>$$</p></li><li><p>If $i &gt; 0$ and $j &gt; 0$, we can get<br>$$<br>dp(i,j) &#x3D; min(dp(i-1,j),dp(i-1,j-1),dp(i,j-1)) + 1<br>$$</p></li></ol><h2 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// Helper function: Find the maximum value (i.e., max square side length) in the 2D matrix dp</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMaxInMatrix</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; dp)</span> </span>&#123;<br>        <span class="hljs-type">int</span> maxVal = INT_MIN;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; row : dp) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> val : row) &#123;<br>                maxVal = <span class="hljs-built_in">max</span>(maxVal, val);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxVal;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// Main function: Find the area of the largest square containing only &#x27;1&#x27;s in the matrix</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximalSquare</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m = matrix.<span class="hljs-built_in">size</span>();      <span class="hljs-comment">// Number of rows</span><br>        <span class="hljs-type">int</span> n = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();   <span class="hljs-comment">// Number of columns</span><br><br>        <span class="hljs-comment">// Create a dp table where dp[i][j] represents the side length of the largest square ending at (i, j)</span><br>        std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(m, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n, <span class="hljs-number">0</span>));<br><br>        <span class="hljs-comment">// Initialize the first column</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">if</span> (matrix[i][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>                dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;  <span class="hljs-comment">// Cannot form a square if original cell is &#x27;0&#x27;</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;  <span class="hljs-comment">// Otherwise, side length is 1</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Initialize the first row</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            <span class="hljs-keyword">if</span> (matrix[<span class="hljs-number">0</span>][j] == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>                dp[<span class="hljs-number">0</span>][j] = <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dp[<span class="hljs-number">0</span>][j] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// State transition</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (matrix[i][j] == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>                    dp[i][j] = <span class="hljs-number">0</span>;  <span class="hljs-comment">// Cannot form a square</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// Transition: take the minimum of top, top-left, and left + 1</span><br>                    dp[i][j] = <span class="hljs-built_in">min</span>(dp[i - <span class="hljs-number">1</span>][j], <span class="hljs-built_in">min</span>(dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>], dp[i][j - <span class="hljs-number">1</span>])) + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Find the maximum square side length</span><br>        <span class="hljs-type">int</span> res = <span class="hljs-built_in">findMaxInMatrix</span>(dp);<br><br>        <span class="hljs-comment">// Return the area of the largest square (side length squared)</span><br>        <span class="hljs-keyword">return</span> res * res;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-5"><a href="#Complexity-Analysis-5" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><strong>Time Complexity:</strong> $O(m \times n)$</li><li><strong>Space Complexity:</strong> $O(m \times n)$</li></ul><hr><h1 id="Common-Deployment-Commands"><a href="#Common-Deployment-Commands" class="headerlink" title="Common Deployment Commands"></a>Common Deployment Commands</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs bash">hexo clean <span class="hljs-comment"># Clear cache</span><br>hexo g <span class="hljs-comment"># Generate static files</span><br>hexo d <span class="hljs-comment"># Deploy to GitHub</span><br></code></pre></div></td></tr></table></figure><hr><p>📬If you have any questions, please contact me:<br>📧 <code>cy2102056@gmail.com</code></p>]]></content>
      
      
      <categories>
          
          <category> C++ Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dynamic Programming(1)---Fibonacci Types</title>
      <link href="/2025/04/11/Dynamic_Programming(1)---Fibonacci%20Types/"/>
      <url>/2025/04/11/Dynamic_Programming(1)---Fibonacci%20Types/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="✨-Overview-of-the-Programming-Content"><a href="#✨-Overview-of-the-Programming-Content" class="headerlink" title="✨ Overview of the Programming Content"></a>✨ Overview of the Programming Content</h1><ol><li>Climb stairs;</li><li>Fibonacci number;</li><li>Nth Tibonacci number;</li><li>Climb stairs with minimum cost;</li><li>Robbery;</li><li>Delete and gain points;</li></ol><p>Recommended editing tool: **Typora **(Markdown editing) </p><hr><h1 id="1-Climb-Stairs"><a href="#1-Climb-Stairs" class="headerlink" title="1. Climb Stairs"></a>1. Climb Stairs</h1><h2 id="Question-Description"><a href="#Question-Description" class="headerlink" title="Question Description:"></a>Question Description:</h2><p>Suppose you are climbing a staircase. It takes $n$ steps to reach the top. Each time you can climb 1 or 2 steps. How many different ways can you climb to the top?</p><h2 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h2><p>We can use $f(x)$ to represent the ‘$x$’ step, consider the last step maybe 1 or 2 steps, we can list the following formula:<br>$$<br>\begin{equation}<br>f(x) &#x3D; f(x-1) + f(x-2)<br>\end{equation}<br>$$<br>It means that the number of solutions to climb the $x$th step is the sum of the number of solutions to climb the $(x-1)$th step and the number of solutions to climb the $(x-2)$th step. It is easy to understand, because we can only climb 1 or 2 steps at a time, so $f(x)$ can only be transferred from $f(x-1)$ and $f(x-2)$. To count the total number of solutions here, we need to sum the contributions of these two items.</p><p>In other words, in my opinion, there are two usual ways to solve basic dynamic questions: finding patterns or solving general formulas. Then, it is easy to transfer the idea into C++ codes.</p><p>There are two methods to deal with this problem.</p><h2 id="Iteration"><a href="#Iteration" class="headerlink" title="Iteration"></a>Iteration</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">class</span> <span class="hljs-string">Solution</span> &#123;<br><span class="hljs-attr">public:</span><br>    <span class="hljs-string">int</span> <span class="hljs-string">climbStairs(int</span> <span class="hljs-string">n)</span> &#123;<br>        <span class="hljs-string">//</span> <span class="hljs-string">Handle</span> <span class="hljs-string">base</span> <span class="hljs-string">cases</span><br>        <span class="hljs-string">if(n</span> <span class="hljs-string">==</span> <span class="hljs-number">0</span><span class="hljs-string">)</span> <span class="hljs-string">return</span> <span class="hljs-number">0</span><span class="hljs-string">;</span>  <span class="hljs-string">//</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">number</span> <span class="hljs-string">of</span> <span class="hljs-string">stairs</span> <span class="hljs-string">is</span> <span class="hljs-number">0</span>, <span class="hljs-string">there</span> <span class="hljs-string">are</span> <span class="hljs-number">0</span> <span class="hljs-string">ways</span> <span class="hljs-string">to</span> <span class="hljs-string">climb</span><br>        <span class="hljs-string">if(n</span> <span class="hljs-string">==</span> <span class="hljs-number">1</span><span class="hljs-string">)</span> <span class="hljs-string">return</span> <span class="hljs-number">1</span><span class="hljs-string">;</span>  <span class="hljs-string">//</span> <span class="hljs-string">If</span> <span class="hljs-string">there&#x27;s</span> <span class="hljs-number">1</span> <span class="hljs-string">stair</span>, <span class="hljs-string">there&#x27;s</span> <span class="hljs-string">only</span> <span class="hljs-number">1</span> <span class="hljs-string">way</span> <span class="hljs-string">to</span> <span class="hljs-string">climb</span> <span class="hljs-string">(one</span> <span class="hljs-string">step)</span><br>        <span class="hljs-string">if(n</span> <span class="hljs-string">==</span> <span class="hljs-number">2</span><span class="hljs-string">)</span> <span class="hljs-string">return</span> <span class="hljs-number">2</span><span class="hljs-string">;</span>  <span class="hljs-string">//</span> <span class="hljs-string">If</span> <span class="hljs-string">there</span> <span class="hljs-string">are</span> <span class="hljs-number">2</span> <span class="hljs-string">stairs</span>, <span class="hljs-string">there</span> <span class="hljs-string">are</span> <span class="hljs-number">2</span> <span class="hljs-string">ways</span> <span class="hljs-string">(1+1</span> <span class="hljs-string">or</span> <span class="hljs-number">2</span> <span class="hljs-string">steps</span> <span class="hljs-string">at</span> <span class="hljs-string">once)</span><br>        <br>        <span class="hljs-string">//</span> <span class="hljs-string">Initialize</span> <span class="hljs-string">dynamic</span> <span class="hljs-string">programming</span> <span class="hljs-string">variables</span><br>        <span class="hljs-string">int</span> <span class="hljs-string">a</span> <span class="hljs-string">=</span> <span class="hljs-number">1</span><span class="hljs-string">;</span>  <span class="hljs-string">//</span> <span class="hljs-string">Represents</span> <span class="hljs-string">the</span> <span class="hljs-string">number</span> <span class="hljs-string">of</span> <span class="hljs-string">ways</span> <span class="hljs-string">to</span> <span class="hljs-string">reach</span> <span class="hljs-string">(n-2)th</span> <span class="hljs-string">stair</span><br>        <span class="hljs-string">int</span> <span class="hljs-string">b</span> <span class="hljs-string">=</span> <span class="hljs-number">2</span><span class="hljs-string">;</span>  <span class="hljs-string">//</span> <span class="hljs-string">Represents</span> <span class="hljs-string">the</span> <span class="hljs-string">number</span> <span class="hljs-string">of</span> <span class="hljs-string">ways</span> <span class="hljs-string">to</span> <span class="hljs-string">reach</span> <span class="hljs-string">(n-1)th</span> <span class="hljs-string">stair</span><br>        <span class="hljs-string">int</span> <span class="hljs-string">sum</span> <span class="hljs-string">=</span> <span class="hljs-number">0</span><span class="hljs-string">;</span> <span class="hljs-string">//</span> <span class="hljs-string">Used</span> <span class="hljs-string">to</span> <span class="hljs-string">store</span> <span class="hljs-string">the</span> <span class="hljs-string">number</span> <span class="hljs-string">of</span> <span class="hljs-string">ways</span> <span class="hljs-string">to</span> <span class="hljs-string">reach</span> <span class="hljs-string">the</span> <span class="hljs-string">current</span> <span class="hljs-string">step</span><br>        <br>        <span class="hljs-string">//</span> <span class="hljs-string">Start</span> <span class="hljs-string">computing</span> <span class="hljs-string">from</span> <span class="hljs-string">the</span> <span class="hljs-string">3rd</span> <span class="hljs-string">stair</span> <span class="hljs-string">up</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">nth</span> <span class="hljs-string">stair</span><br>        <span class="hljs-string">for(int</span> <span class="hljs-string">i</span> <span class="hljs-string">=</span> <span class="hljs-number">3</span><span class="hljs-string">;</span> <span class="hljs-string">i</span> <span class="hljs-string">&lt;=</span> <span class="hljs-string">n;</span> <span class="hljs-string">i++)</span>&#123;<br>            <span class="hljs-string">sum</span> <span class="hljs-string">=</span> <span class="hljs-string">a</span> <span class="hljs-string">+</span> <span class="hljs-string">b;</span>  <span class="hljs-string">//</span> <span class="hljs-string">The</span> <span class="hljs-string">number</span> <span class="hljs-string">of</span> <span class="hljs-string">ways</span> <span class="hljs-string">to</span> <span class="hljs-string">reach</span> <span class="hljs-string">the</span> <span class="hljs-string">ith</span> <span class="hljs-string">stair</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">sum</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">ways</span> <span class="hljs-string">to</span> <span class="hljs-string">reach</span> <span class="hljs-string">(i-1)th</span> <span class="hljs-string">and</span> <span class="hljs-string">(i-2)th</span> <span class="hljs-string">stairs</span><br>            <span class="hljs-string">a</span> <span class="hljs-string">=</span> <span class="hljs-string">b;</span>        <span class="hljs-string">//</span> <span class="hljs-string">Update</span> <span class="hljs-string">a</span> <span class="hljs-string">to</span> <span class="hljs-string">be</span> <span class="hljs-string">the</span> <span class="hljs-string">previous</span> <span class="hljs-string">b</span> <span class="hljs-string">(ways</span> <span class="hljs-string">to</span> <span class="hljs-string">reach</span> <span class="hljs-string">(i-1)th</span> <span class="hljs-string">stair)</span><br>            <span class="hljs-string">b</span> <span class="hljs-string">=</span> <span class="hljs-string">sum;</span>      <span class="hljs-string">//</span> <span class="hljs-string">Update</span> <span class="hljs-string">b</span> <span class="hljs-string">to</span> <span class="hljs-string">be</span> <span class="hljs-string">the</span> <span class="hljs-string">current</span> <span class="hljs-string">number</span> <span class="hljs-string">of</span> <span class="hljs-string">ways</span><br>        &#125;<br>        <br>        <span class="hljs-string">return</span> <span class="hljs-string">sum;</span>  <span class="hljs-string">//</span> <span class="hljs-string">Return</span> <span class="hljs-string">the</span> <span class="hljs-string">number</span> <span class="hljs-string">of</span> <span class="hljs-string">ways</span> <span class="hljs-string">to</span> <span class="hljs-string">reach</span> <span class="hljs-string">the</span> <span class="hljs-string">nth</span> <span class="hljs-string">stair</span><br>    &#125;<br>&#125;<span class="hljs-string">;</span><br><br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis"><a href="#Complexity-Analysis" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(n)$</p></li><li><p><strong>Space Complexity:</strong> $O(1)$</p></li></ul><h2 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">class</span> <span class="hljs-string">Solution</span> &#123;<br><span class="hljs-attr">public:</span><br>    <span class="hljs-string">//</span> <span class="hljs-attr">Main function:</span> <span class="hljs-string">calculates</span> <span class="hljs-string">the</span> <span class="hljs-string">number</span> <span class="hljs-string">of</span> <span class="hljs-string">ways</span> <span class="hljs-string">to</span> <span class="hljs-string">reach</span> <span class="hljs-string">the</span> <span class="hljs-string">n-th</span> <span class="hljs-string">stair</span><br>    <span class="hljs-string">int</span> <span class="hljs-string">climbStairs(int</span> <span class="hljs-string">n)</span> &#123;<br>        <span class="hljs-string">//</span> <span class="hljs-string">Call</span> <span class="hljs-string">the</span> <span class="hljs-string">helper</span> <span class="hljs-string">function</span> <span class="hljs-string">Fibonacci</span> <span class="hljs-string">to</span> <span class="hljs-string">perform</span> <span class="hljs-string">recursive</span> <span class="hljs-string">computation</span><br>        <span class="hljs-string">//</span> <span class="hljs-string">Initially</span> <span class="hljs-string">pass</span> <span class="hljs-string">in</span> <span class="hljs-number">1</span> <span class="hljs-string">and</span> <span class="hljs-number">1</span>, <span class="hljs-string">representing</span> <span class="hljs-string">the</span> <span class="hljs-string">1st</span> <span class="hljs-string">and</span> <span class="hljs-string">2nd</span> <span class="hljs-string">terms</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">Fibonacci</span> <span class="hljs-string">sequence</span><br>        <span class="hljs-string">return</span> <span class="hljs-string">Fibonacci(n</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span><span class="hljs-string">);</span><br>    &#125;<br><br>    <span class="hljs-string">//</span> <span class="hljs-attr">Helper function:</span> <span class="hljs-string">recursively</span> <span class="hljs-string">computes</span> <span class="hljs-string">the</span> <span class="hljs-string">n-th</span> <span class="hljs-string">Fibonacci</span> <span class="hljs-string">number</span><br>    <span class="hljs-string">int</span> <span class="hljs-string">Fibonacci(int</span> <span class="hljs-string">n</span>, <span class="hljs-string">int</span> <span class="hljs-string">a</span>, <span class="hljs-string">int</span> <span class="hljs-string">b)</span> &#123;<br>        <span class="hljs-string">//</span> <span class="hljs-attr">Base case:</span> <span class="hljs-string">when</span> <span class="hljs-string">n</span> <span class="hljs-string">reaches</span> <span class="hljs-number">1</span>, <span class="hljs-string">return</span> <span class="hljs-string">a</span> <span class="hljs-string">(which</span> <span class="hljs-string">holds</span> <span class="hljs-string">the</span> <span class="hljs-string">final</span> <span class="hljs-string">result)</span><br>        <span class="hljs-string">if</span> <span class="hljs-string">(n</span> <span class="hljs-string">==</span> <span class="hljs-number">1</span><span class="hljs-string">)</span> <span class="hljs-string">return</span> <span class="hljs-string">a;</span><br>        <br>        <span class="hljs-string">//</span> <span class="hljs-attr">Recursive call:</span> <span class="hljs-string">move</span> <span class="hljs-string">one</span> <span class="hljs-string">step</span> <span class="hljs-string">down</span> <span class="hljs-string">(n</span> <span class="hljs-bullet">-</span> <span class="hljs-number">1</span><span class="hljs-string">)</span>,<br>        <span class="hljs-string">//</span> <span class="hljs-string">a</span> <span class="hljs-string">becomes</span> <span class="hljs-string">the</span> <span class="hljs-string">new</span> <span class="hljs-string">b</span>, <span class="hljs-string">and</span> <span class="hljs-string">b</span> <span class="hljs-string">becomes</span> <span class="hljs-string">a</span> <span class="hljs-string">+</span> <span class="hljs-string">b</span><br>        <span class="hljs-string">return</span> <span class="hljs-string">Fibonacci(n</span> <span class="hljs-bullet">-</span> <span class="hljs-number">1</span>, <span class="hljs-string">b</span>, <span class="hljs-string">a</span> <span class="hljs-string">+</span> <span class="hljs-string">b);</span><br>    &#125;<br>&#125;<span class="hljs-string">;</span><br><br></code></pre></div></td></tr></table></figure><hr><h1 id="2-Fibonacci-Number"><a href="#2-Fibonacci-Number" class="headerlink" title="2. Fibonacci Number"></a>2. Fibonacci Number</h1><h2 id="Question-Description-1"><a href="#Question-Description-1" class="headerlink" title="Question Description"></a>Question Description</h2><p>The sequence of Fibonacci numbers (usually denoted by $F(n)$) is called the Fibonacci sequence. The sequence starts with 0 and 1. and each subsequent number is the sum of the previous two numbers. That is:<br>$$<br>F(0) &#x3D; 0, \quad F(1) &#x3D; 1<br>$$</p><p>$$<br>F(n) &#x3D; F(n - 1) + F(n - 2), \quad \text{其中 } n &gt; 1<br>$$</p><p>Given the number $n$, please calculate $F(n)$. </p><h2 id="Analyse-1"><a href="#Analyse-1" class="headerlink" title="Analyse"></a>Analyse</h2><p>This question is similar with the first one - ‘Climb Stairs’. </p><p>The boundary conditions of Fibonacci Number are $F(0) &#x3D; 0$ and $F(1) &#x3D; 1$. When $n &gt; 1$, the sum of each term is equal to the sum of the previous two terms, so there is the following recursive relationship:<br>$$<br>F(n) &#x3D; F(n-1) + F(n-2)<br>$$<br>Since the Fibonacci numbers have a recursive relationship, dynamic programming  can be used to solve them. The state transition equation of dynamic programming is the above recursive relationship, and the boundary conditions are $F(0)$ and $F(1)$.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">class</span> <span class="hljs-string">Solution</span> &#123;<br><span class="hljs-attr">public:</span><br>    <span class="hljs-string">int</span> <span class="hljs-string">fib(int</span> <span class="hljs-string">n)</span> &#123;<br>        <span class="hljs-string">//</span> <span class="hljs-string">If</span> <span class="hljs-string">n</span> <span class="hljs-string">is</span> <span class="hljs-number">0</span>, <span class="hljs-string">return</span> <span class="hljs-number">0</span> <span class="hljs-string">since</span> <span class="hljs-string">the</span> <span class="hljs-string">0th</span> <span class="hljs-string">Fibonacci</span> <span class="hljs-string">number</span> <span class="hljs-string">is</span> <span class="hljs-number">0</span><br>        <span class="hljs-string">if(n</span> <span class="hljs-string">==</span> <span class="hljs-number">0</span><span class="hljs-string">)</span> <span class="hljs-string">return</span> <span class="hljs-number">0</span><span class="hljs-string">;</span><br>        <span class="hljs-string">//</span> <span class="hljs-string">If</span> <span class="hljs-string">n</span> <span class="hljs-string">is</span> <span class="hljs-number">1</span>, <span class="hljs-string">return</span> <span class="hljs-number">1</span> <span class="hljs-string">since</span> <span class="hljs-string">the</span> <span class="hljs-string">1st</span> <span class="hljs-string">Fibonacci</span> <span class="hljs-string">number</span> <span class="hljs-string">is</span> <span class="hljs-number">1</span><br>        <span class="hljs-string">if(n</span> <span class="hljs-string">==</span> <span class="hljs-number">1</span><span class="hljs-string">)</span> <span class="hljs-string">return</span> <span class="hljs-number">1</span><span class="hljs-string">;</span><br>        <br>        <span class="hljs-string">//</span> <span class="hljs-attr">Initialize the first two Fibonacci numbers:</span> <span class="hljs-string">a</span> <span class="hljs-string">represents</span> <span class="hljs-string">F(0)</span>, <span class="hljs-string">b</span> <span class="hljs-string">represents</span> <span class="hljs-string">F(1)</span><br>        <span class="hljs-string">int</span> <span class="hljs-string">a</span> <span class="hljs-string">=</span> <span class="hljs-number">0</span><span class="hljs-string">;</span><br>        <span class="hljs-string">int</span> <span class="hljs-string">b</span> <span class="hljs-string">=</span> <span class="hljs-number">1</span><span class="hljs-string">;</span><br>        <span class="hljs-string">//</span> <span class="hljs-string">sum</span> <span class="hljs-string">is</span> <span class="hljs-string">used</span> <span class="hljs-string">to</span> <span class="hljs-string">store</span> <span class="hljs-string">the</span> <span class="hljs-string">current</span> <span class="hljs-string">Fibonacci</span> <span class="hljs-string">number</span> <span class="hljs-string">being</span> <span class="hljs-string">calculated</span><br>        <span class="hljs-string">int</span> <span class="hljs-string">sum</span> <span class="hljs-string">=</span> <span class="hljs-number">0</span><span class="hljs-string">;</span><br>        <br>        <span class="hljs-string">//</span> <span class="hljs-string">Iterate</span> <span class="hljs-string">from</span> <span class="hljs-string">the</span> <span class="hljs-string">2nd</span> <span class="hljs-string">Fibonacci</span> <span class="hljs-string">number</span> <span class="hljs-string">up</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">nth</span><br>        <span class="hljs-string">for(int</span> <span class="hljs-string">i</span> <span class="hljs-string">=</span> <span class="hljs-number">2</span><span class="hljs-string">;</span> <span class="hljs-string">i</span> <span class="hljs-string">&lt;=</span> <span class="hljs-string">n;</span> <span class="hljs-string">i++)</span>&#123;<br>            <span class="hljs-string">//</span> <span class="hljs-attr">Calculate the current Fibonacci number:</span> <span class="hljs-string">F(i)</span> <span class="hljs-string">=</span> <span class="hljs-string">F(i</span> <span class="hljs-bullet">-</span> <span class="hljs-number">2</span><span class="hljs-string">)</span> <span class="hljs-string">+</span> <span class="hljs-string">F(i</span> <span class="hljs-bullet">-</span> <span class="hljs-number">1</span><span class="hljs-string">)</span><br>            <span class="hljs-string">sum</span> <span class="hljs-string">=</span> <span class="hljs-string">a</span> <span class="hljs-string">+</span> <span class="hljs-string">b;</span><br>            <span class="hljs-string">//</span> <span class="hljs-string">Update</span> <span class="hljs-string">a</span> <span class="hljs-string">to</span> <span class="hljs-string">be</span> <span class="hljs-string">F(i</span> <span class="hljs-bullet">-</span> <span class="hljs-number">1</span><span class="hljs-string">)</span>, <span class="hljs-string">which</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">previous</span> <span class="hljs-string">value</span> <span class="hljs-string">of</span> <span class="hljs-string">b</span><br>            <span class="hljs-string">a</span> <span class="hljs-string">=</span> <span class="hljs-string">b;</span><br>            <span class="hljs-string">//</span> <span class="hljs-string">Update</span> <span class="hljs-string">b</span> <span class="hljs-string">to</span> <span class="hljs-string">be</span> <span class="hljs-string">F(i)</span>, <span class="hljs-string">which</span> <span class="hljs-string">is</span> <span class="hljs-string">the</span> <span class="hljs-string">current</span> <span class="hljs-string">value</span> <span class="hljs-string">stored</span> <span class="hljs-string">in</span> <span class="hljs-string">sum</span><br>            <span class="hljs-string">b</span> <span class="hljs-string">=</span> <span class="hljs-string">sum;</span><br>        &#125;<br>        <br>        <span class="hljs-string">//</span> <span class="hljs-string">Return</span> <span class="hljs-string">the</span> <span class="hljs-string">nth</span> <span class="hljs-string">Fibonacci</span> <span class="hljs-string">number</span><br>        <span class="hljs-string">return</span> <span class="hljs-string">sum;</span><br>    &#125;<br>&#125;<span class="hljs-string">;</span><br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-1"><a href="#Complexity-Analysis-1" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(n)$</p></li><li><p><strong>Space Complexity:</strong> $O(1)$</p></li></ul><hr><h1 id="3-Nth-Tibonacci-number"><a href="#3-Nth-Tibonacci-number" class="headerlink" title="3. Nth Tibonacci number"></a>3. Nth Tibonacci number</h1><h2 id="Question-Description-2"><a href="#Question-Description-2" class="headerlink" title="Question Description"></a>Question Description</h2><p>The Tibonacci sequence $(T_n)$ is defined as follows:</p><p>$$<br>T_0 &#x3D; 0,\quad T_1 &#x3D; 1,\quad T_2 &#x3D; 1<br>$$</p><p>and:</p><p>$$<br>T_{n+3} &#x3D; T_n + T_{n+1} + T_{n+2}<br>$$</p><p>Given an integer $(n)$, return the value of the $(n)$-th Tibonacci number $(T_n)$.</p><h2 id="Analyse-2"><a href="#Analyse-2" class="headerlink" title="Analyse"></a>Analyse</h2><p>This questions is also similar with th above two. The only difference is that the previous formula is the first two decision values, while this one is the first three decision values.</p><p>We can use dynamic programming to solve this question. The boundary conditions of Tibonacci number is $T(0) &#x3D; 0$, $T(1) &#x3D; 1$, $T(2) &#x3D; 1$. If $n &gt; 2$, the sum of each term is equal to the sum of the previous three terms, so there is the following recursive relationship:<br>$$<br>T(n) &#x3D; T(n-1) + T(n-2) + T(n - 3)<br>$$</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">class</span> <span class="hljs-string">Solution</span> &#123;<br><span class="hljs-attr">public:</span><br>    <span class="hljs-string">int</span> <span class="hljs-string">tribonacci(int</span> <span class="hljs-string">n)</span> &#123;<br>        <span class="hljs-string">//</span> <span class="hljs-string">Handle</span> <span class="hljs-string">base</span> <span class="hljs-string">cases</span><br>        <span class="hljs-string">if(n</span> <span class="hljs-string">==</span> <span class="hljs-number">0</span><span class="hljs-string">)</span> <span class="hljs-string">return</span> <span class="hljs-number">0</span><span class="hljs-string">;</span>  <span class="hljs-string">//</span> <span class="hljs-string">The</span> <span class="hljs-string">0th</span> <span class="hljs-string">Tribonacci</span> <span class="hljs-string">number</span> <span class="hljs-string">is</span> <span class="hljs-number">0</span><br>        <span class="hljs-string">if(n</span> <span class="hljs-string">==</span> <span class="hljs-number">1</span><span class="hljs-string">)</span> <span class="hljs-string">return</span> <span class="hljs-number">1</span><span class="hljs-string">;</span>  <span class="hljs-string">//</span> <span class="hljs-string">The</span> <span class="hljs-string">1st</span> <span class="hljs-string">Tribonacci</span> <span class="hljs-string">number</span> <span class="hljs-string">is</span> <span class="hljs-number">1</span><br>        <span class="hljs-string">if(n</span> <span class="hljs-string">==</span> <span class="hljs-number">2</span><span class="hljs-string">)</span> <span class="hljs-string">return</span> <span class="hljs-number">1</span><span class="hljs-string">;</span>  <span class="hljs-string">//</span> <span class="hljs-string">The</span> <span class="hljs-string">2nd</span> <span class="hljs-string">Tribonacci</span> <span class="hljs-string">number</span> <span class="hljs-string">is</span> <span class="hljs-number">1</span><br><br>        <span class="hljs-string">//</span> <span class="hljs-string">Initialize</span> <span class="hljs-string">dynamic</span> <span class="hljs-string">programming</span> <span class="hljs-string">variables</span><br>        <span class="hljs-string">int</span> <span class="hljs-string">a</span> <span class="hljs-string">=</span> <span class="hljs-number">0</span><span class="hljs-string">;</span>  <span class="hljs-string">//</span> <span class="hljs-string">Represents</span> <span class="hljs-string">T(n-3)</span><br>        <span class="hljs-string">int</span> <span class="hljs-string">b</span> <span class="hljs-string">=</span> <span class="hljs-number">1</span><span class="hljs-string">;</span>  <span class="hljs-string">//</span> <span class="hljs-string">Represents</span> <span class="hljs-string">T(n-2)</span><br>        <span class="hljs-string">int</span> <span class="hljs-string">c</span> <span class="hljs-string">=</span> <span class="hljs-number">1</span><span class="hljs-string">;</span>  <span class="hljs-string">//</span> <span class="hljs-string">Represents</span> <span class="hljs-string">T(n-1)</span><br>        <span class="hljs-string">int</span> <span class="hljs-string">sum</span> <span class="hljs-string">=</span> <span class="hljs-number">0</span><span class="hljs-string">;</span> <span class="hljs-string">//</span> <span class="hljs-string">Used</span> <span class="hljs-string">to</span> <span class="hljs-string">store</span> <span class="hljs-string">the</span> <span class="hljs-string">current</span> <span class="hljs-string">Tribonacci</span> <span class="hljs-string">number</span><br><br>        <span class="hljs-string">//</span> <span class="hljs-string">Compute</span> <span class="hljs-string">from</span> <span class="hljs-string">the</span> <span class="hljs-string">3rd</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">n-th</span> <span class="hljs-string">term</span><br>        <span class="hljs-string">for(int</span> <span class="hljs-string">i</span> <span class="hljs-string">=</span> <span class="hljs-number">3</span><span class="hljs-string">;</span> <span class="hljs-string">i</span> <span class="hljs-string">&lt;=</span> <span class="hljs-string">n;</span> <span class="hljs-string">i++)</span>&#123;<br>            <span class="hljs-string">sum</span> <span class="hljs-string">=</span> <span class="hljs-string">a</span> <span class="hljs-string">+</span> <span class="hljs-string">b</span> <span class="hljs-string">+</span> <span class="hljs-string">c;</span>  <span class="hljs-string">//</span> <span class="hljs-attr">According to the Tribonacci definition:</span> <span class="hljs-string">T(n)</span> <span class="hljs-string">=</span> <span class="hljs-string">T(n-1)</span> <span class="hljs-string">+</span> <span class="hljs-string">T(n-2)</span> <span class="hljs-string">+</span> <span class="hljs-string">T(n-3)</span><br>            <span class="hljs-string">a</span> <span class="hljs-string">=</span> <span class="hljs-string">b;</span>            <span class="hljs-string">//</span> <span class="hljs-string">Update</span> <span class="hljs-string">a</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">previous</span> <span class="hljs-string">value</span> <span class="hljs-string">of</span> <span class="hljs-string">b</span> <span class="hljs-string">(i.e.</span>, <span class="hljs-string">T(n-2))</span><br>            <span class="hljs-string">b</span> <span class="hljs-string">=</span> <span class="hljs-string">c;</span>            <span class="hljs-string">//</span> <span class="hljs-string">Update</span> <span class="hljs-string">b</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">previous</span> <span class="hljs-string">value</span> <span class="hljs-string">of</span> <span class="hljs-string">c</span> <span class="hljs-string">(i.e.</span>, <span class="hljs-string">T(n-1))</span><br>            <span class="hljs-string">c</span> <span class="hljs-string">=</span> <span class="hljs-string">sum;</span>          <span class="hljs-string">//</span> <span class="hljs-string">Update</span> <span class="hljs-string">c</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">current</span> <span class="hljs-string">value</span> <span class="hljs-string">(i.e.</span>, <span class="hljs-string">T(n))</span><br>        &#125;<br><br>        <span class="hljs-string">return</span> <span class="hljs-string">sum;</span>  <span class="hljs-string">//</span> <span class="hljs-string">Return</span> <span class="hljs-string">the</span> <span class="hljs-string">n-th</span> <span class="hljs-string">Tribonacci</span> <span class="hljs-string">number</span><br>    &#125;<br>&#125;<span class="hljs-string">;</span><br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-2"><a href="#Complexity-Analysis-2" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(n)$</p></li><li><p><strong>Space Complexity:</strong> $O(1)$</p></li></ul><hr><h1 id="4-Climb-Stairs-Using-Minimum-Cost"><a href="#4-Climb-Stairs-Using-Minimum-Cost" class="headerlink" title="4. Climb Stairs Using Minimum Cost"></a>4. Climb Stairs Using Minimum Cost</h1><h2 id="Question-Description-3"><a href="#Question-Description-3" class="headerlink" title="Question Description"></a>Question Description</h2><p>Now you are given an integer array cost, where cost$[i]$ is the cost to climb up to step $i$. Once you pay this cost, you can choose to climb up 1 or 2 steps. </p><p>Please calculate and return the minimum cost to reach the top of the stairs.</p><h2 id="Analyse-3"><a href="#Analyse-3" class="headerlink" title="Analyse"></a>Analyse</h2><p>The most important issue of this question is the recursion formula which can show the relationship between $dp[i]$, $dp[i-1]$ and $dp[i-2]$.</p><p>Create an array $dp$ of length $n + 1$, where $dp[i]$ represents the minimum cost to reach index $i$.</p><p>If you want to reach to the step $i$, you have two choices. </p><ol><li>1 Step: From step $i - 1$, so the cost is $dp[i-1] + cost[i-1]$;</li><li>2 Steps: From step $i - 2$, so the cost is $dp[i-2] + cost[i -2]$;</li></ol><p>When $2≤ i ≤ n$, we can reach index $i$ from index $i-1$ using the cost of cost$[i - 1]$, or from index $i - 2$ using the cost of cost$[i - 2]$ to reach index $i$. In order to minimize the total cost, $dp[i]$ should take the minimum of the above two items, so the state transition equation is as follows:<br>$$<br>dp[i] &#x3D; min(dp[i-1]+cost[i-1],dp[i-2] + cost[i-2])<br>$$</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">class</span> <span class="hljs-string">Solution</span> &#123;<br><span class="hljs-attr">public:</span><br>    <span class="hljs-string">int</span> <span class="hljs-string">minCostClimbingStairs(vector&lt;int&gt;&amp;</span> <span class="hljs-string">cost)</span> &#123;<br>        <span class="hljs-string">int</span> <span class="hljs-string">n</span> <span class="hljs-string">=</span> <span class="hljs-string">cost.size();</span>  <span class="hljs-string">//</span> <span class="hljs-string">Get</span> <span class="hljs-string">the</span> <span class="hljs-string">total</span> <span class="hljs-string">number</span> <span class="hljs-string">of</span> <span class="hljs-string">steps</span> <span class="hljs-string">(length</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">cost</span> <span class="hljs-string">array)</span><br><br>        <span class="hljs-string">//</span> <span class="hljs-attr">Method 1: Using a DP array (Space Complexity:</span> <span class="hljs-string">O(n))</span><br>        <span class="hljs-string">/*</span><br>        <span class="hljs-string">vector&lt;int&gt;</span> <span class="hljs-string">dp(n</span> <span class="hljs-string">+</span> <span class="hljs-number">1</span><span class="hljs-string">);</span>  <span class="hljs-string">//</span> <span class="hljs-string">dp</span>[<span class="hljs-string">i</span>] <span class="hljs-string">represents</span> <span class="hljs-string">the</span> <span class="hljs-string">minimum</span> <span class="hljs-string">cost</span> <span class="hljs-string">to</span> <span class="hljs-string">reach</span> <span class="hljs-string">the</span> <span class="hljs-string">i-th</span> <span class="hljs-string">step</span><br>        <span class="hljs-string">dp</span>[<span class="hljs-number">0</span>] <span class="hljs-string">=</span> <span class="hljs-number">0</span><span class="hljs-string">;</span>  <span class="hljs-string">//</span> <span class="hljs-string">Starting</span> <span class="hljs-string">from</span> <span class="hljs-string">the</span> <span class="hljs-string">ground</span> <span class="hljs-string">(step</span> <span class="hljs-number">0</span><span class="hljs-string">)</span> <span class="hljs-string">costs</span> <span class="hljs-string">nothing</span><br>        <span class="hljs-string">dp</span>[<span class="hljs-number">1</span>] <span class="hljs-string">=</span> <span class="hljs-number">0</span><span class="hljs-string">;</span>  <span class="hljs-string">//</span> <span class="hljs-string">You</span> <span class="hljs-string">can</span> <span class="hljs-string">step</span> <span class="hljs-string">onto</span> <span class="hljs-string">step</span> <span class="hljs-number">1</span> <span class="hljs-string">directly</span> <span class="hljs-string">with</span> <span class="hljs-literal">no</span> <span class="hljs-string">initial</span> <span class="hljs-string">cost</span><br>        <span class="hljs-string">for</span> <span class="hljs-string">(int</span> <span class="hljs-string">i</span> <span class="hljs-string">=</span> <span class="hljs-number">2</span><span class="hljs-string">;</span> <span class="hljs-string">i</span> <span class="hljs-string">&lt;=</span> <span class="hljs-string">n;</span> <span class="hljs-string">i++)</span> &#123;<br>            <span class="hljs-string">dp</span>[<span class="hljs-string">i</span>] <span class="hljs-string">=</span> <span class="hljs-string">min(dp</span>[<span class="hljs-string">i-1</span>] <span class="hljs-string">+</span> <span class="hljs-string">cost</span>[<span class="hljs-string">i-1</span>],  <span class="hljs-string">//</span> <span class="hljs-string">Step</span> <span class="hljs-string">from</span> <span class="hljs-string">i-1</span> <span class="hljs-string">with</span> <span class="hljs-string">cost</span><br>                        <span class="hljs-string">dp</span>[<span class="hljs-string">i-2</span>] <span class="hljs-string">+</span> <span class="hljs-string">cost</span>[<span class="hljs-string">i-2</span>]<span class="hljs-string">);</span> <span class="hljs-string">//</span> <span class="hljs-string">Or</span> <span class="hljs-string">step</span> <span class="hljs-string">from</span> <span class="hljs-string">i-2</span> <span class="hljs-string">with</span> <span class="hljs-string">cost</span><br>        &#125;<br>        <span class="hljs-string">return</span> <span class="hljs-string">dp</span>[<span class="hljs-string">n</span>]<span class="hljs-string">;</span>  <span class="hljs-string">//</span> <span class="hljs-string">Return</span> <span class="hljs-string">the</span> <span class="hljs-string">minimum</span> <span class="hljs-string">cost</span> <span class="hljs-string">to</span> <span class="hljs-string">reach</span> <span class="hljs-string">the</span> <span class="hljs-string">top</span> <span class="hljs-string">(step</span> <span class="hljs-string">n)</span><br>        <span class="hljs-string">*/</span><br><br>        <span class="hljs-string">//</span> <span class="hljs-attr">Method 2: Space-optimized version (Space Complexity:</span> <span class="hljs-string">O(1))</span><br>        <span class="hljs-string">int</span> <span class="hljs-string">a</span> <span class="hljs-string">=</span> <span class="hljs-number">0</span><span class="hljs-string">;</span>  <span class="hljs-string">//</span> <span class="hljs-string">Represents</span> <span class="hljs-string">dp</span>[<span class="hljs-string">i-2</span>], <span class="hljs-string">initially</span> <span class="hljs-string">corresponds</span> <span class="hljs-string">to</span> <span class="hljs-string">dp</span>[<span class="hljs-number">0</span>]<br>        <span class="hljs-string">int</span> <span class="hljs-string">b</span> <span class="hljs-string">=</span> <span class="hljs-number">0</span><span class="hljs-string">;</span>  <span class="hljs-string">//</span> <span class="hljs-string">Represents</span> <span class="hljs-string">dp</span>[<span class="hljs-string">i-1</span>], <span class="hljs-string">initially</span> <span class="hljs-string">corresponds</span> <span class="hljs-string">to</span> <span class="hljs-string">dp</span>[<span class="hljs-number">1</span>]<br><br>        <span class="hljs-string">for</span> <span class="hljs-string">(int</span> <span class="hljs-string">i</span> <span class="hljs-string">=</span> <span class="hljs-number">2</span><span class="hljs-string">;</span> <span class="hljs-string">i</span> <span class="hljs-string">&lt;=</span> <span class="hljs-string">n;</span> <span class="hljs-string">i++)</span> &#123;<br>            <span class="hljs-string">//</span> <span class="hljs-attr">Compute the minimum cost to reach the current step i:</span><br>            <span class="hljs-string">//</span> <span class="hljs-attr">1. From step i-2 with cost:</span> <span class="hljs-string">a</span> <span class="hljs-string">+</span> <span class="hljs-string">cost</span>[<span class="hljs-string">i-2</span>]<br>            <span class="hljs-string">//</span> <span class="hljs-attr">2. From step i-1 with cost:</span> <span class="hljs-string">b</span> <span class="hljs-string">+</span> <span class="hljs-string">cost</span>[<span class="hljs-string">i-1</span>]<br>            <span class="hljs-string">int</span> <span class="hljs-string">c</span> <span class="hljs-string">=</span> <span class="hljs-string">min(a</span> <span class="hljs-string">+</span> <span class="hljs-string">cost</span>[<span class="hljs-string">i-2</span>], <span class="hljs-string">b</span> <span class="hljs-string">+</span> <span class="hljs-string">cost</span>[<span class="hljs-string">i-1</span>]<span class="hljs-string">);</span><br><br>            <span class="hljs-string">//</span> <span class="hljs-attr">Update the rolling variables:</span><br>            <span class="hljs-string">a</span> <span class="hljs-string">=</span> <span class="hljs-string">b;</span>  <span class="hljs-string">//</span> <span class="hljs-string">dp</span>[<span class="hljs-string">i-1</span>] <span class="hljs-string">becomes</span> <span class="hljs-string">dp</span>[<span class="hljs-string">i-2</span>] <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">next</span> <span class="hljs-string">iteration</span><br>            <span class="hljs-string">b</span> <span class="hljs-string">=</span> <span class="hljs-string">c;</span>  <span class="hljs-string">//</span> <span class="hljs-string">dp</span>[<span class="hljs-string">i</span>] <span class="hljs-string">becomes</span> <span class="hljs-string">dp</span>[<span class="hljs-string">i-1</span>] <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">next</span> <span class="hljs-string">iteration</span><br>        &#125;<br><br>        <span class="hljs-string">return</span> <span class="hljs-string">b;</span>  <span class="hljs-string">//</span> <span class="hljs-string">b</span> <span class="hljs-string">now</span> <span class="hljs-string">holds</span> <span class="hljs-string">the</span> <span class="hljs-string">final</span> <span class="hljs-string">result</span> <span class="hljs-string">dp</span>[<span class="hljs-string">n</span>]<br>    &#125;<br>&#125;<span class="hljs-string">;</span><br><br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-3"><a href="#Complexity-Analysis-3" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(n)$</p></li><li><p><strong>Space Complexity:</strong> $O(1)$</p></li></ul><hr><h1 id="5-Robbery"><a href="#5-Robbery" class="headerlink" title="5. Robbery"></a>5. Robbery</h1><h2 id="Question-Description-4"><a href="#Question-Description-4" class="headerlink" title="Question Description"></a>Question Description</h2><p>You are a professional thief, planning to steal from houses along the street. There is a certain amount of cash hidden in each house. The only limiting factor affecting your theft is that the adjacent houses are equipped with interconnected anti-theft systems. If two adjacent houses are broken into by thieves on the same night, the system will automatically alarm.</p><h2 id="Analyse-4"><a href="#Analyse-4" class="headerlink" title="Analyse"></a>Analyse</h2><p>The most important issue of this question is “to steal or not to steak” when facing the ith house.</p><p>There are two choices:</p><ol><li>To steal the $i$th house, so that you can not steal the ‘$i-1$’th house. The total stealing amount is the sum of the maximum total amount of the first $i-2$ houses and the amount of the $i$th house;</li><li>Do not steal the $i$th house, and the total amount of the theft is the maximum total amount of the first $i-1$ houses.</li></ol><p>Choose the option with the larger total theft amount between the two options. The total theft amount corresponding to this option is the maximum total theft amount that can be stolen from the first $i$ houses.</p><p>Use $dp[i]$ to represent the maximum total theft amount that can be stolen from the first $i$ houses, then there is the following state transition equation:<br>$$<br>dp[i] &#x3D; max(dp[i-2] + nums[i],dp[i-1])<br>$$<br>The boundary conditions is：</p><p>$$<br>\begin{cases}<br>\text{dp}[0] &#x3D; \text{nums}[0], &amp; \text{if there is only one house, rob it} \\<br>\text{dp}[1] &#x3D; \max(\text{nums}[0], \text{nums}[1]), &amp; \text{if there are two houses,rob the one with the higher amount}<br>\end{cases}<br>$$</p><p>The final answer is $dp[n - 1]$, where  $n$ is the length of the array.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">class</span> <span class="hljs-string">Solution</span> &#123;<br><span class="hljs-attr">public:</span><br>    <span class="hljs-string">int</span> <span class="hljs-string">rob(vector&lt;int&gt;&amp;</span> <span class="hljs-string">nums)</span> &#123;<br>        <span class="hljs-string">int</span> <span class="hljs-string">n</span> <span class="hljs-string">=</span> <span class="hljs-string">nums.size();</span>  <span class="hljs-string">//</span> <span class="hljs-string">Get</span> <span class="hljs-string">the</span> <span class="hljs-string">number</span> <span class="hljs-string">of</span> <span class="hljs-string">houses</span><br><br>        <span class="hljs-string">//</span> <span class="hljs-string">Handle</span> <span class="hljs-string">special</span> <span class="hljs-string">cases</span><br>        <span class="hljs-string">if</span> <span class="hljs-string">(n</span> <span class="hljs-string">==</span> <span class="hljs-number">0</span><span class="hljs-string">)</span> <span class="hljs-string">return</span> <span class="hljs-number">0</span><span class="hljs-string">;</span>            <span class="hljs-string">//</span> <span class="hljs-literal">No</span> <span class="hljs-string">houses</span> <span class="hljs-string">to</span> <span class="hljs-string">rob</span>, <span class="hljs-string">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-string">if</span> <span class="hljs-string">(n</span> <span class="hljs-string">==</span> <span class="hljs-number">1</span><span class="hljs-string">)</span> <span class="hljs-string">return</span> <span class="hljs-string">nums</span>[<span class="hljs-number">0</span>]<span class="hljs-string">;</span>      <span class="hljs-string">//</span> <span class="hljs-string">Only</span> <span class="hljs-string">one</span> <span class="hljs-string">house</span>, <span class="hljs-string">rob</span> <span class="hljs-string">it</span><br><br>        <span class="hljs-string">//</span> <span class="hljs-string">Create</span> <span class="hljs-string">a</span> <span class="hljs-string">DP</span> <span class="hljs-string">array</span> <span class="hljs-string">where</span> <span class="hljs-string">dp</span>[<span class="hljs-string">i</span>] <span class="hljs-string">represents</span> <span class="hljs-string">the</span> <span class="hljs-string">maximum</span> <span class="hljs-string">amount</span> <span class="hljs-string">that</span> <span class="hljs-string">can</span> <span class="hljs-string">be</span> <span class="hljs-string">robbed</span> <span class="hljs-string">up</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">i-th</span> <span class="hljs-string">house</span><br>        <span class="hljs-string">vector&lt;int&gt;</span> <span class="hljs-string">dp(n);</span><br><br>        <span class="hljs-string">//</span> <span class="hljs-string">Initialize</span> <span class="hljs-string">the</span> <span class="hljs-string">first</span> <span class="hljs-string">two</span> <span class="hljs-string">states</span><br>        <span class="hljs-string">dp</span>[<span class="hljs-number">0</span>] <span class="hljs-string">=</span> <span class="hljs-string">nums</span>[<span class="hljs-number">0</span>]<span class="hljs-string">;</span>                      <span class="hljs-string">//</span> <span class="hljs-string">If</span> <span class="hljs-string">only</span> <span class="hljs-string">the</span> <span class="hljs-number">0</span><span class="hljs-string">-th</span> <span class="hljs-string">house</span> <span class="hljs-string">is</span> <span class="hljs-string">available</span>, <span class="hljs-string">rob</span> <span class="hljs-string">it</span><br>        <span class="hljs-string">dp</span>[<span class="hljs-number">1</span>] <span class="hljs-string">=</span> <span class="hljs-string">max(nums</span>[<span class="hljs-number">0</span>], <span class="hljs-string">nums</span>[<span class="hljs-number">1</span>]<span class="hljs-string">);</span>        <span class="hljs-string">//</span> <span class="hljs-string">If</span> <span class="hljs-string">two</span> <span class="hljs-string">houses</span> <span class="hljs-string">are</span> <span class="hljs-string">available</span>, <span class="hljs-string">rob</span> <span class="hljs-string">the</span> <span class="hljs-string">one</span> <span class="hljs-string">with</span> <span class="hljs-string">the</span> <span class="hljs-string">higher</span> <span class="hljs-string">amount</span><br><br>        <span class="hljs-string">//</span> <span class="hljs-string">Start</span> <span class="hljs-string">computing</span> <span class="hljs-string">from</span> <span class="hljs-string">the</span> <span class="hljs-string">2nd</span> <span class="hljs-string">house</span> <span class="hljs-string">onward</span><br>        <span class="hljs-string">for</span> <span class="hljs-string">(int</span> <span class="hljs-string">i</span> <span class="hljs-string">=</span> <span class="hljs-number">2</span><span class="hljs-string">;</span> <span class="hljs-string">i</span> <span class="hljs-string">&lt;</span> <span class="hljs-string">n;</span> <span class="hljs-string">i++)</span> &#123;<br>            <span class="hljs-string">/*</span><br>              <span class="hljs-attr">DP recurrence relation:</span><br>              <span class="hljs-string">For</span> <span class="hljs-string">the</span> <span class="hljs-string">i-th</span> <span class="hljs-string">house</span>, <span class="hljs-attr">there are two options:</span><br>              <span class="hljs-attr">1. Rob it:</span> <span class="hljs-string">in</span> <span class="hljs-string">this</span> <span class="hljs-string">case</span>, <span class="hljs-string">you</span> <span class="hljs-string">cannot</span> <span class="hljs-string">rob</span> <span class="hljs-string">the</span> <span class="hljs-string">previous</span> <span class="hljs-string">one</span>,<br>                 <span class="hljs-string">so</span> <span class="hljs-string">the</span> <span class="hljs-string">total</span> <span class="hljs-string">is</span> <span class="hljs-string">dp</span>[<span class="hljs-string">i-2</span>] <span class="hljs-string">+</span> <span class="hljs-string">nums</span>[<span class="hljs-string">i</span>]<br>              <span class="hljs-attr">2. Skip it:</span> <span class="hljs-string">keep</span> <span class="hljs-string">the</span> <span class="hljs-string">maximum</span> <span class="hljs-string">amount</span> <span class="hljs-string">from</span> <span class="hljs-string">dp</span>[<span class="hljs-string">i-1</span>]<br>              <span class="hljs-string">Take</span> <span class="hljs-string">the</span> <span class="hljs-string">maximum</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">two</span> <span class="hljs-string">options</span><br>            <span class="hljs-string">*/</span><br>            <span class="hljs-string">dp</span>[<span class="hljs-string">i</span>] <span class="hljs-string">=</span> <span class="hljs-string">max(dp</span>[<span class="hljs-string">i-2</span>] <span class="hljs-string">+</span> <span class="hljs-string">nums</span>[<span class="hljs-string">i</span>], <span class="hljs-string">dp</span>[<span class="hljs-string">i-1</span>]<span class="hljs-string">);</span><br>        &#125;<br><br>        <span class="hljs-string">//</span> <span class="hljs-string">Return</span> <span class="hljs-string">the</span> <span class="hljs-string">maximum</span> <span class="hljs-string">amount</span> <span class="hljs-string">that</span> <span class="hljs-string">can</span> <span class="hljs-string">be</span> <span class="hljs-string">robbed</span> <span class="hljs-string">up</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">last</span> <span class="hljs-string">house</span><br>        <span class="hljs-string">return</span> <span class="hljs-string">dp</span>[<span class="hljs-string">n-1</span>]<span class="hljs-string">;</span><br>    &#125;<br>&#125;<span class="hljs-string">;</span><br><br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-4"><a href="#Complexity-Analysis-4" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><p><strong>Time Complexity:</strong> $O(n)$</p></li><li><p><strong>Space Complexity:</strong> $O(1)$</p></li></ul><hr><h1 id="6-Delete-and-Get-Points"><a href="#6-Delete-and-Get-Points" class="headerlink" title="6. Delete and Get Points"></a>6. Delete and Get Points</h1><h2 id="Question-Description-5"><a href="#Question-Description-5" class="headerlink" title="Question Description"></a>Question Description</h2><p>You are given an array of integers $nums$ and you can perform some operations on it. </p><p>In each operations, pick any $nums[i]$, delete it and get the number of points of $nums[i]$. After that, you must delete all elements equal to $nums[i]$ - 1 and $nums[i]$+ 1.</p><p>You start with o points. Return th maximum number of points you can get by these operations.</p><h2 id="Analyse-5"><a href="#Analyse-5" class="headerlink" title="Analyse"></a>Analyse</h2><p>This question is similar to the fifth one “robbery”.</p><h3 id="Storyline"><a href="#Storyline" class="headerlink" title="Storyline"></a>Storyline</h3><p>After robbing three villages, the thief arrived at the fourth village to continue his heist. He noticed that the villagers here had become smarter—the houses were shuffled, and the alarm system was more sensitive. When he tried to steal from houses with <strong>5 coins</strong>, <strong>6 coins</strong>, or <strong>4 coins</strong>, the alarm would trigger. However, due to a performance issue (a “bug”), if he stole from <strong>5-coin</strong> houses, the alarm <strong>would not be triggered</strong>.</p><p>Aha! The thief was a programmer! So he came up with the following idea:</p><h3 id="Robbery-Strategy"><a href="#Robbery-Strategy" class="headerlink" title="Robbery Strategy"></a>Robbery Strategy</h3><ol><li>He cleverly sorted the list of house amounts and wrote it down in his notebook.  Since he discovered the alarm system’s “bug”, he only recorded <strong>one 5-coin</strong> house, even if there were multiple.  He also noted how many such houses there were so he wouldn’t miss them during the robbery.</li></ol><p>​So his notebook contained two key things:</p><ul><li>A sorted list of house amounts <strong>(no duplicates!)</strong></li><li>A mapping from each amount to the <strong>number of houses</strong> with that amount  (he used a hash map for quick lookup)</li></ul><ol start="2"><li>After preparing the list, he began robbing.<br>Each time he robbed a house, he kept track of the maximum amount he could steal up to that point.</li></ol><ul><li>When stealing the next house, if he finds that the amount of money stolen this time is <strong>exactly equal</strong> to the amount stolen <strong>last time + 1</strong>, he will see whether the amount of money stolen from the current house plus the amount of money stolen from the previous house is greater, or the amount of money stolen from the previous house is greater.</li></ul><p>$$<br>dp[i] &#x3D; max(dp[i - 1], dp[i - 2] + dp[i] * m[dp[i]]);<br>$$</p><ul><li>If the amount of money stolen from this house is <strong>greater than 1</strong> compared to the amount stolen last time, he knows that the alarm will not be triggered, so he brings the money from last time as well.</li></ul><p>$$<br>dp[i] &#x3D; dp[i - 1] + dp[i] * m[dp[i]]);<br>$$</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">class</span> <span class="hljs-string">Solution</span> &#123;<br><span class="hljs-attr">public:</span><br>    <span class="hljs-string">int</span> <span class="hljs-string">deleteAndEarn(vector&lt;int&gt;&amp;</span> <span class="hljs-string">nums)</span> &#123;<br>        <span class="hljs-string">//</span> <span class="hljs-number">1</span><span class="hljs-string">.</span> <span class="hljs-string">First</span>, <span class="hljs-string">sort</span> <span class="hljs-string">the</span> <span class="hljs-string">input</span> <span class="hljs-string">array</span><br>        <span class="hljs-string">sort(nums.begin()</span>, <span class="hljs-string">nums.end());</span><br>        <span class="hljs-string">int</span> <span class="hljs-string">n</span> <span class="hljs-string">=</span> <span class="hljs-string">nums.size();</span><br>        <br>        <span class="hljs-string">//</span> <span class="hljs-number">2</span><span class="hljs-string">.</span> <span class="hljs-string">Handle</span> <span class="hljs-string">edge</span> <span class="hljs-string">cases</span><br>        <span class="hljs-string">if</span> <span class="hljs-string">(nums.empty())</span> <span class="hljs-string">return</span> <span class="hljs-number">0</span><span class="hljs-string">;</span>        <span class="hljs-string">//</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">array</span> <span class="hljs-string">is</span> <span class="hljs-string">empty</span>, <span class="hljs-string">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-string">if</span> <span class="hljs-string">(n</span> <span class="hljs-string">==</span> <span class="hljs-number">1</span><span class="hljs-string">)</span> <span class="hljs-string">return</span> <span class="hljs-string">nums</span>[<span class="hljs-number">0</span>]<span class="hljs-string">;</span>        <span class="hljs-string">//</span> <span class="hljs-string">If</span> <span class="hljs-string">there&#x27;s</span> <span class="hljs-string">only</span> <span class="hljs-string">one</span> <span class="hljs-string">element</span>, <span class="hljs-string">return</span> <span class="hljs-string">it</span> <span class="hljs-string">directly</span><br>        <br>        <span class="hljs-string">//</span> <span class="hljs-number">3</span><span class="hljs-string">.</span> <span class="hljs-string">Count</span> <span class="hljs-string">the</span> <span class="hljs-string">frequency</span> <span class="hljs-string">of</span> <span class="hljs-string">each</span> <span class="hljs-string">number</span><br>        <span class="hljs-string">unordered_map&lt;int</span>, <span class="hljs-string">int&gt;</span> <span class="hljs-string">countMap;</span><br>        <span class="hljs-attr">for (int num :</span> <span class="hljs-string">nums)</span> &#123;<br>            <span class="hljs-string">countMap</span>[<span class="hljs-string">num</span>]<span class="hljs-string">++;</span><br>        &#125;<br>        <br>        <span class="hljs-string">//</span> <span class="hljs-number">4</span><span class="hljs-string">.</span> <span class="hljs-string">Extract</span> <span class="hljs-string">unique</span> <span class="hljs-string">numbers</span> <span class="hljs-string">and</span> <span class="hljs-string">sort</span> <span class="hljs-string">them</span><br>        <span class="hljs-string">unordered_set&lt;int&gt;</span> <span class="hljs-string">unique_set(nums.begin()</span>, <span class="hljs-string">nums.end());</span>     <span class="hljs-string">//</span> <span class="hljs-string">Remove</span> <span class="hljs-string">duplicates</span><br>        <span class="hljs-string">vector&lt;int&gt;</span> <span class="hljs-string">unique_nums(unique_set.begin()</span>, <span class="hljs-string">unique_set.end());</span><br>        <span class="hljs-string">sort(unique_nums.begin()</span>, <span class="hljs-string">unique_nums.end());</span>                <span class="hljs-string">//</span> <span class="hljs-string">Sort</span> <span class="hljs-string">the</span> <span class="hljs-string">unique</span> <span class="hljs-string">numbers</span><br>        <br>        <span class="hljs-string">int</span> <span class="hljs-string">m</span> <span class="hljs-string">=</span> <span class="hljs-string">unique_nums.size();</span>  <span class="hljs-string">//</span> <span class="hljs-string">The</span> <span class="hljs-string">number</span> <span class="hljs-string">of</span> <span class="hljs-string">unique</span> <span class="hljs-string">elements</span><br>        <br>        <span class="hljs-string">//</span> <span class="hljs-number">5</span><span class="hljs-string">.</span> <span class="hljs-string">Initialize</span> <span class="hljs-string">the</span> <span class="hljs-string">DP</span> <span class="hljs-string">array</span><br>        <span class="hljs-string">vector&lt;int&gt;</span> <span class="hljs-string">dp(m</span>, <span class="hljs-number">0</span><span class="hljs-string">);</span>        <span class="hljs-string">//</span> <span class="hljs-string">dp</span>[<span class="hljs-string">i</span>] <span class="hljs-string">represents</span> <span class="hljs-string">the</span> <span class="hljs-string">maximum</span> <span class="hljs-string">points</span> <span class="hljs-string">when</span> <span class="hljs-string">considering</span> <span class="hljs-string">up</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">i-th</span> <span class="hljs-string">unique</span> <span class="hljs-string">number</span><br>        <span class="hljs-string">dp</span>[<span class="hljs-number">0</span>] <span class="hljs-string">=</span> <span class="hljs-string">unique_nums</span>[<span class="hljs-number">0</span>] <span class="hljs-string">*</span> <span class="hljs-string">countMap</span>[<span class="hljs-string">unique_nums</span>[<span class="hljs-number">0</span>]]<span class="hljs-string">;</span>  <span class="hljs-string">//</span> <span class="hljs-attr">Base case:</span> <span class="hljs-string">only</span> <span class="hljs-string">the</span> <span class="hljs-string">first</span> <span class="hljs-string">number</span><br>        <br>        <span class="hljs-string">if</span> <span class="hljs-string">(m</span> <span class="hljs-string">==</span> <span class="hljs-number">1</span><span class="hljs-string">)</span> <span class="hljs-string">return</span> <span class="hljs-string">dp</span>[<span class="hljs-number">0</span>]<span class="hljs-string">;</span>    <span class="hljs-string">//</span> <span class="hljs-string">If</span> <span class="hljs-string">only</span> <span class="hljs-string">one</span> <span class="hljs-string">unique</span> <span class="hljs-string">number</span> <span class="hljs-string">exists</span>, <span class="hljs-string">return</span> <span class="hljs-string">its</span> <span class="hljs-string">result</span><br>        <br>        <span class="hljs-string">//</span> <span class="hljs-number">6</span><span class="hljs-string">.</span> <span class="hljs-string">Handle</span> <span class="hljs-string">the</span> <span class="hljs-string">second</span> <span class="hljs-string">number</span><br>        <span class="hljs-string">if</span> <span class="hljs-string">((unique_nums</span>[<span class="hljs-number">1</span>] <span class="hljs-bullet">-</span> <span class="hljs-string">unique_nums</span>[<span class="hljs-number">0</span>]<span class="hljs-string">)</span> <span class="hljs-string">==</span> <span class="hljs-number">1</span><span class="hljs-string">)</span> &#123;<br>            <span class="hljs-string">//</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">two</span> <span class="hljs-string">numbers</span> <span class="hljs-string">are</span> <span class="hljs-string">consecutive</span>, <span class="hljs-string">you</span> <span class="hljs-string">can&#x27;t</span> <span class="hljs-string">take</span> <span class="hljs-string">both</span><br>            <span class="hljs-string">dp</span>[<span class="hljs-number">1</span>] <span class="hljs-string">=</span> <span class="hljs-string">max(unique_nums</span>[<span class="hljs-number">0</span>] <span class="hljs-string">*</span> <span class="hljs-string">countMap</span>[<span class="hljs-string">unique_nums</span>[<span class="hljs-number">0</span>]], <br>                        <span class="hljs-string">unique_nums</span>[<span class="hljs-number">1</span>] <span class="hljs-string">*</span> <span class="hljs-string">countMap</span>[<span class="hljs-string">unique_nums</span>[<span class="hljs-number">1</span>]]<span class="hljs-string">);</span><br>        &#125; <span class="hljs-string">else</span> &#123;<br>            <span class="hljs-string">//</span> <span class="hljs-string">If</span> <span class="hljs-string">not</span> <span class="hljs-string">adjacent</span>, <span class="hljs-string">you</span> <span class="hljs-string">can</span> <span class="hljs-string">safely</span> <span class="hljs-string">add</span> <span class="hljs-string">them</span><br>            <span class="hljs-string">dp</span>[<span class="hljs-number">1</span>] <span class="hljs-string">=</span> <span class="hljs-string">dp</span>[<span class="hljs-number">0</span>] <span class="hljs-string">+</span> <span class="hljs-string">unique_nums</span>[<span class="hljs-number">1</span>] <span class="hljs-string">*</span> <span class="hljs-string">countMap</span>[<span class="hljs-string">unique_nums</span>[<span class="hljs-number">1</span>]]<span class="hljs-string">;</span><br>        &#125;<br>        <br>        <span class="hljs-string">//</span> <span class="hljs-number">7</span><span class="hljs-string">.</span> <span class="hljs-string">DP</span> <span class="hljs-string">transition</span> <span class="hljs-string">for</span> <span class="hljs-string">the</span> <span class="hljs-string">rest</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">numbers</span><br>        <span class="hljs-string">for</span> <span class="hljs-string">(int</span> <span class="hljs-string">i</span> <span class="hljs-string">=</span> <span class="hljs-number">2</span><span class="hljs-string">;</span> <span class="hljs-string">i</span> <span class="hljs-string">&lt;</span> <span class="hljs-string">m;</span> <span class="hljs-string">i++)</span> &#123;<br>            <span class="hljs-string">if</span> <span class="hljs-string">((unique_nums</span>[<span class="hljs-string">i</span>] <span class="hljs-bullet">-</span> <span class="hljs-string">unique_nums</span>[<span class="hljs-string">i-1</span>]<span class="hljs-string">)</span> <span class="hljs-string">==</span> <span class="hljs-number">1</span><span class="hljs-string">)</span> &#123;<br>                <span class="hljs-string">//</span> <span class="hljs-string">If</span> <span class="hljs-string">the</span> <span class="hljs-string">current</span> <span class="hljs-string">number</span> <span class="hljs-string">is</span> <span class="hljs-string">adjacent</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">previous</span> <span class="hljs-string">one</span>,<br>                <span class="hljs-string">//</span> <span class="hljs-attr">you must choose between:</span><br>                <span class="hljs-string">//</span> <span class="hljs-bullet">-</span> <span class="hljs-string">Taking</span> <span class="hljs-string">the</span> <span class="hljs-string">current</span> <span class="hljs-string">number</span> <span class="hljs-string">and</span> <span class="hljs-string">combining</span> <span class="hljs-string">with</span> <span class="hljs-string">dp</span>[<span class="hljs-string">i-2</span>]<br>                <span class="hljs-string">//</span> <span class="hljs-bullet">-</span> <span class="hljs-string">Skipping</span> <span class="hljs-string">the</span> <span class="hljs-string">current</span> <span class="hljs-string">number</span> <span class="hljs-string">and</span> <span class="hljs-string">inheriting</span> <span class="hljs-string">dp</span>[<span class="hljs-string">i-1</span>]<br>                <span class="hljs-string">dp</span>[<span class="hljs-string">i</span>] <span class="hljs-string">=</span> <span class="hljs-string">max(unique_nums</span>[<span class="hljs-string">i</span>] <span class="hljs-string">*</span> <span class="hljs-string">countMap</span>[<span class="hljs-string">unique_nums</span>[<span class="hljs-string">i</span>]] <span class="hljs-string">+</span> <span class="hljs-string">dp</span>[<span class="hljs-string">i-2</span>], <br>                           <span class="hljs-string">dp</span>[<span class="hljs-string">i-1</span>]<span class="hljs-string">);</span><br>            &#125; <span class="hljs-string">else</span> &#123;<br>                <span class="hljs-string">//</span> <span class="hljs-string">If</span> <span class="hljs-string">not</span> <span class="hljs-string">adjacent</span>, <span class="hljs-string">you</span> <span class="hljs-string">can</span> <span class="hljs-string">safely</span> <span class="hljs-string">add</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">previous</span> <span class="hljs-string">result</span><br>                <span class="hljs-string">dp</span>[<span class="hljs-string">i</span>] <span class="hljs-string">=</span> <span class="hljs-string">dp</span>[<span class="hljs-string">i-1</span>] <span class="hljs-string">+</span> <span class="hljs-string">unique_nums</span>[<span class="hljs-string">i</span>] <span class="hljs-string">*</span> <span class="hljs-string">countMap</span>[<span class="hljs-string">unique_nums</span>[<span class="hljs-string">i</span>]]<span class="hljs-string">;</span><br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-string">//</span> <span class="hljs-number">8</span><span class="hljs-string">.</span> <span class="hljs-string">Return</span> <span class="hljs-string">the</span> <span class="hljs-string">final</span> <span class="hljs-string">result</span><br>        <span class="hljs-string">return</span> <span class="hljs-string">dp</span>[<span class="hljs-string">m-1</span>]<span class="hljs-string">;</span><br>    &#125;<br>&#125;<span class="hljs-string">;</span><br><br></code></pre></div></td></tr></table></figure><h3 id="Complexity-Analysis-5"><a href="#Complexity-Analysis-5" class="headerlink" title="Complexity Analysis"></a>Complexity Analysis</h3><ul><li><strong>Time Complexity:</strong> $O(nlog(n))$</li><li><strong>Space Complexity:</strong> $O(n)$</li></ul><hr><h1 id="Common-Deployment-Commands"><a href="#Common-Deployment-Commands" class="headerlink" title="Common Deployment Commands"></a>Common Deployment Commands</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs bash">hexo clean <span class="hljs-comment"># Clear cache</span><br>hexo g <span class="hljs-comment"># Generate static files</span><br>hexo d <span class="hljs-comment"># Deploy to GitHub</span><br></code></pre></div></td></tr></table></figure><hr><p>📬If you have any questions, please contact me:<br>📧 <code>cy2102056@gmail.com</code></p>]]></content>
      
      
      <categories>
          
          <category> C++ Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/03/28/hello-world/"/>
      <url>/2025/03/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ Program </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 GitHub 搭建自己的博客？- 入门教程（4）</title>
      <link href="/2025/03/27/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%9F-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%884%EF%BC%89/"/>
      <url>/2025/03/27/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%9F-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%884%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="✨-本文优化内容概览"><a href="#✨-本文优化内容概览" class="headerlink" title="✨ 本文优化内容概览"></a>✨ 本文优化内容概览</h1><ol><li>增加代码一键复制功能；</li><li>为了在 Hexo 首页添加「<strong>雪花特效</strong>」，并且只作用于首页 <code>http://localhost:4000/</code>;</li><li>修改categories模块的外框大小，优化排版格式；</li><li>重新进行文章的Permalink链接大小排版；</li></ol><p>编辑工具推荐：<strong>Typora</strong>（Markdown 编辑）</p><hr><h3 id="1-代码一键复制"><a href="#1-代码一键复制" class="headerlink" title="1. 代码一键复制"></a>1. 代码一键复制</h3><p>在每个代码块的右上角显示一个“复制”按钮，点击即可复制内容，支持多种语言块如 <code>yaml</code>, <code>js</code>, <code>python</code> 等。在每个代码块的右上角显示文字 **<code>copy</code>**，而不是图标（如 <code>fa-copy</code>）。</p><h4 id="✅-修改步骤"><a href="#✅-修改步骤" class="headerlink" title="✅ 修改步骤"></a>✅ 修改步骤</h4><h4 id="第-1-步：更新-copy-button-js（脚本）"><a href="#第-1-步：更新-copy-button-js（脚本）" class="headerlink" title="第 1 步：更新 copy-button.js（脚本）"></a>第 1 步：更新 <code>copy-button.js</code>（脚本）</h4><p>在 <code>themes/hexo-theme-Chic/scripts/</code> 目录下（没有可新建），创建文件：<code>copy-button.js</code>，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;after_post_render&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-comment">// 给每个 &lt;pre&gt;&lt;code&gt; 块加上复制按钮（文字版）</span><br>  <span class="hljs-keyword">const</span> copyButton = <span class="hljs-string">&#x27;&lt;button class=&quot;copy-btn&quot; data-clipboard-snippet&gt;copy&lt;/button&gt;&#x27;</span>;<br>  data.<span class="hljs-property">content</span> = data.<span class="hljs-property">content</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&lt;pre&gt;&lt;code([^&gt;]*)&gt;/g</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">match, lang</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;div class=&quot;code-wrapper&quot;&gt;&#x27;</span> + copyButton + <span class="hljs-string">&#x27;&lt;pre&gt;&lt;code&#x27;</span> + lang + <span class="hljs-string">&#x27;&gt;&#x27;</span>;<br>  &#125;).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&lt;\/code&gt;&lt;\/pre&gt;/g</span>, <span class="hljs-string">&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#x27;</span>);<br>  <span class="hljs-keyword">return</span> data;<br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="第-2-步：更新-CSS-样式"><a href="#第-2-步：更新-CSS-样式" class="headerlink" title="第 2 步：更新 CSS 样式"></a>第 2 步：更新 CSS 样式</h4><p>修改 <code>themes/hexo-theme-Chic/source/css/custom.css</code> 添加&#x2F;更新：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs css"><span class="hljs-selector-class">.code-wrapper</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-selector-class">.copy-btn</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">6px</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">8px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#3498db</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.75rem</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">2px</span> <span class="hljs-number">8px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">10</span>;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.7</span>;<br>  <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">0.2s</span> ease;<br>&#125;<br><br><span class="hljs-selector-class">.copy-btn</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="第-3-步：更新复制功能脚本"><a href="#第-3-步：更新复制功能脚本" class="headerlink" title="第 3 步：更新复制功能脚本"></a>第 3 步：更新复制功能脚本</h4><p>在 <code>footer.ejs</code> 中末尾 <code>&lt;script&gt;</code> 里加入或替换：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> clipboard = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClipboardJS</span>(<span class="hljs-string">&#x27;.copy-btn&#x27;</span>, &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">target</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">trigger</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> trigger.<span class="hljs-property">nextElementSibling</span>;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    clipboard.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> originalText = e.<span class="hljs-property">trigger</span>.<span class="hljs-property">innerText</span>;</span><br><span class="language-javascript">      e.<span class="hljs-property">trigger</span>.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;已复制&#x27;</span>;</span><br><span class="language-javascript">      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        e.<span class="hljs-property">trigger</span>.<span class="hljs-property">innerText</span> = originalText;</span><br><span class="language-javascript">      &#125;, <span class="hljs-number">1500</span>);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    clipboard.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      e.<span class="hljs-property">trigger</span>.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;复制失败&#x27;</span>;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="预期效果"><a href="#预期效果" class="headerlink" title="预期效果"></a>预期效果</h3><p>每段代码右上角会出现小巧的 <code>copy</code> 按钮，点击后变为 <code>已复制</code>，过 1.5 秒自动恢复。</p><p><img src="/images/20250327/image-20250327103638843.png" alt="image-20250327103638843"></p><hr><h3 id="2-增加首页雪花特效"><a href="#2-增加首页雪花特效" class="headerlink" title="2. 增加首页雪花特效"></a>2. 增加首页雪花特效</h3><p>为了在 Hexo 首页添加「<strong>雪花特效</strong>」，并且只作用于首页 <code>http://localhost:4000/</code>。</p><hr><h4 id="✅-第一步：创建雪花效果脚本-snow-js"><a href="#✅-第一步：创建雪花效果脚本-snow-js" class="headerlink" title="✅ 第一步：创建雪花效果脚本 snow.js"></a>✅ 第一步：创建雪花效果脚本 <code>snow.js</code></h4><p>在路径：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs gradle">themes<span class="hljs-regexp">/hexo-theme-chic/</span><span class="hljs-keyword">source</span><span class="hljs-regexp">/js/</span><br></code></pre></div></td></tr></table></figure><p>下新建一个文件：<code>snow.js</code>，写入以下内容（雪花核心效果）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">//</span> <span class="hljs-string">雪花特效（亮银色</span> <span class="hljs-string">+</span> <span class="hljs-string">放大）</span><br><span class="hljs-string">$(function</span> <span class="hljs-string">()</span> &#123;<br>  <span class="hljs-string">var</span> <span class="hljs-string">$flake</span> <span class="hljs-string">=</span> <span class="hljs-string">$(&#x27;&lt;div</span> <span class="hljs-string">class=&quot;snow-flake&quot;&gt;❄&lt;/div&gt;&#x27;).css(</span>&#123;<br>    <span class="hljs-attr">&#x27;position&#x27;:</span> <span class="hljs-string">&#x27;absolute&#x27;</span>,<br>    <span class="hljs-attr">&#x27;top&#x27;:</span> <span class="hljs-string">&#x27;-50px&#x27;</span>,<br>    <span class="hljs-attr">&#x27;color&#x27;:</span> <span class="hljs-string">&#x27;#C0C0C0&#x27;</span>, <span class="hljs-string">//</span> <span class="hljs-string">✅</span> <span class="hljs-string">亮银色</span><br>    <span class="hljs-attr">&#x27;user-select&#x27;:</span> <span class="hljs-string">&#x27;none&#x27;</span>,<br>    <span class="hljs-attr">&#x27;z-index&#x27;:</span> <span class="hljs-string">&#x27;9999&#x27;</span>,<br>    <span class="hljs-attr">&#x27;pointer-events&#x27;:</span> <span class="hljs-string">&#x27;none&#x27;</span><br>  &#125;<span class="hljs-string">);</span><br><br>  <span class="hljs-string">setInterval(function</span> <span class="hljs-string">()</span> &#123;<br>    <span class="hljs-string">var</span> <span class="hljs-string">startLeft</span> <span class="hljs-string">=</span> <span class="hljs-string">Math.random()</span> <span class="hljs-string">*</span> <span class="hljs-string">$(window).width();</span><br>    <span class="hljs-string">var</span> <span class="hljs-string">endLeft</span> <span class="hljs-string">=</span> <span class="hljs-string">Math.random()</span> <span class="hljs-string">*</span> <span class="hljs-string">$(window).width();</span><br>    <span class="hljs-string">var</span> <span class="hljs-string">duration</span> <span class="hljs-string">=</span> <span class="hljs-number">10000</span> <span class="hljs-string">+</span> <span class="hljs-string">Math.random()</span> <span class="hljs-string">*</span> <span class="hljs-number">5000</span><span class="hljs-string">;</span><br><br>    <span class="hljs-string">var</span> <span class="hljs-string">$clone</span> <span class="hljs-string">=</span> <span class="hljs-string">$flake.clone();</span><br>    <span class="hljs-string">$clone.css(</span>&#123;<br>      <span class="hljs-attr">&#x27;left&#x27;:</span> <span class="hljs-string">startLeft</span>,<br>      <span class="hljs-attr">&#x27;opacity&#x27;:</span> <span class="hljs-number">0.8</span> <span class="hljs-string">+</span> <span class="hljs-string">Math.random()</span> <span class="hljs-string">*</span> <span class="hljs-number">0.2</span>,<br>      <span class="hljs-attr">&#x27;font-size&#x27;:</span> <span class="hljs-number">24</span> <span class="hljs-string">+</span> <span class="hljs-string">Math.random()</span> <span class="hljs-string">*</span> <span class="hljs-number">16</span> <span class="hljs-string">//</span> <span class="hljs-string">✅</span> <span class="hljs-string">放大字号：24px</span> <span class="hljs-string">~</span> <span class="hljs-string">40px</span><br>    &#125;<span class="hljs-string">);</span><br><br>    <span class="hljs-string">$(&#x27;body&#x27;).append($clone);</span><br>    <span class="hljs-string">$clone.animate(</span>&#123;<br>      <span class="hljs-attr">&#x27;top&#x27;:</span> <span class="hljs-string">&#x27;100%&#x27;</span>,<br>      <span class="hljs-attr">&#x27;left&#x27;:</span> <span class="hljs-string">endLeft</span>,<br>      <span class="hljs-attr">&#x27;opacity&#x27;:</span> <span class="hljs-number">0.1</span><br>    &#125;, <span class="hljs-string">duration</span>, <span class="hljs-string">function</span> <span class="hljs-string">()</span> &#123;<br>      <span class="hljs-string">$(this).remove();</span><br>    &#125;<span class="hljs-string">);</span><br>  &#125;, <span class="hljs-number">300</span><span class="hljs-string">);</span> <span class="hljs-string">//</span> <span class="hljs-string">❄</span> <span class="hljs-string">密度适中</span><br>&#125;<span class="hljs-string">);</span><br></code></pre></div></td></tr></table></figure><hr><h4 id="✅-第二步：修改-themes-hexo-theme-chic-layout-index-ejs"><a href="#✅-第二步：修改-themes-hexo-theme-chic-layout-index-ejs" class="headerlink" title="✅ 第二步：修改 themes/hexo-theme-chic/layout/index.ejs"></a>✅ 第二步：修改 <code>themes/hexo-theme-chic/layout/index.ejs</code></h4><p>请在该文件中最下方 <code>&lt;/body&gt;</code> 之前加上以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs xml">html复制编辑<span class="hljs-comment">&lt;!-- 雪花特效 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://libs.baidu.com/jquery/1.8.3/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/snow.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>⚠️ 建议只引入一次 <code>jquery.min.js</code>（避免重复），你可以删掉 <code>.js</code> 的版本。</p><hr><h4 id="✅-第三步：执行-Hexo-重新构建"><a href="#✅-第三步：执行-Hexo-重新构建" class="headerlink" title="✅ 第三步：执行 Hexo 重新构建"></a>✅ 第三步：执行 Hexo 重新构建</h4><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo s<br></code></pre></div></td></tr></table></figure><p>然后打开：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//localhost:4000/</span><br></code></pre></div></td></tr></table></figure><p>将在首页看到 ❄ 雪花飘落特效 🎉。</p><p><img src="/images/20250327/image-20250327104914467.png" alt="image-20250327104914467"></p><hr><h3 id="3-Catrgories模块修改"><a href="#3-Catrgories模块修改" class="headerlink" title="3. Catrgories模块修改"></a>3. Catrgories模块修改</h3><p>要求是两个分类C++ Program的外框大小与Blog Building保持一致，<a href="http://localhost:4000/categories/%E5%9C%B0%E5%9D%80%E7%9A%84%E2%80%9CHello">http://localhost:4000/categories/地址的“Hello</a> World” 要与“如何使用 GitHub 搭建自己的博客？- 入门教程（1）”对齐，而不是和“如何使用 GitHub 搭建自己的博客？- 入门教程（4）” 对齐。</p><p><strong>当前问题</strong>：</p><ul><li><code>.category-card</code> 采用 <code>flex-direction: column; justify-content: space-between;</code> 导致内容在卡片中居中或底部对齐；</li><li><code>C++ Program</code> 分类只有一项内容，其卡片高度虽然一致，但内容没有顶部对齐。</li></ul><p><strong>目标</strong>：</p><ul><li>所有 <code>.category-card</code> 高度一致；</li><li>所有卡片内部内容靠顶部对齐（尤其是 <code>&lt;ul&gt;</code> 列表）；</li></ul><h3 id="✅-修改方法"><a href="#✅-修改方法" class="headerlink" title="✅ 修改方法"></a>✅ 修改方法</h3><h4 id="📄-第一步：修改-CSS（如-custom-styl-或-css）"><a href="#📄-第一步：修改-CSS（如-custom-styl-或-css）" class="headerlink" title="📄 第一步：修改 CSS（如 custom.styl 或 .css）"></a>📄 第一步：修改 CSS（如 <code>custom.styl</code> 或 <code>.css</code>）</h4><p>请将以下样式添加到你的 <code>custom.styl</code> 或主题中：</p><p>D:\Cloud\myBlog\myBlog\themes\hexo-theme-Chic\source\css路径下面的custom.styl文件内容如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs stylus"><span class="hljs-comment">/* 自定义分类对齐优化 */</span><br><span class="hljs-selector-class">.category-card-wrapper</span> &#123;<br>  <span class="hljs-attribute">align-items</span>: flex-start;<br>&#125;<br><br><span class="hljs-selector-class">.categories-grid</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-wrap</span>: wrap;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">1rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.category-card</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">320px</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br><br><span class="hljs-comment">/* === 分类卡片布局优化 === */</span><br><span class="hljs-selector-class">.categories-grid</span><br>  <span class="hljs-attribute">display</span>: flex<br>  <span class="hljs-attribute">flex-wrap</span>: wrap<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">1.5rem</span><br><br><span class="hljs-selector-class">.category-card</span><br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">300px</span><br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">320px</span><br>  <span class="hljs-attribute">display</span>: flex<br>  <span class="hljs-attribute">flex-direction</span>: column<br>  <span class="hljs-attribute">justify-content</span>: flex-start<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1rem</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f8f9fa</span><br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span><br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">8px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.04</span>)<br><br><span class="hljs-selector-class">.category-name</span><br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0.75rem</span><br><br><span class="hljs-selector-class">.category-posts</span><br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0</span><br>  <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><blockquote><p>如果你用的是 CSS，而不是 Stylus，可替换为相同结构的 CSS。</p></blockquote><hr><p>D:\Cloud\myBlog\myBlog\themes\hexo-theme-Chic\layout路径下面的categories.ejs文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;container&quot;&gt;</span><br>  <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;post-wrap</span> <span class="hljs-string">categories&quot;&gt;</span><br>    <span class="hljs-string">&lt;h2</span> <span class="hljs-string">class=&quot;post-title&quot;&gt;-</span> <span class="hljs-string">All</span> <span class="hljs-string">Categories</span> <span class="hljs-string">-&lt;/h2&gt;</span><br><br>    &lt;%<span class="language-ruby"> <span class="hljs-keyword">if</span> (site.categories &amp;&amp; site.categories.length &gt; <span class="hljs-number">0</span>) &#123; </span>%&gt;<br>      <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;category-card-wrapper&quot;&gt;</span><br>        &lt;%<span class="language-ruby"> site.categories.forEach(function(category)&#123; </span>%&gt;<br>          <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;category-card&quot;&gt;</span><br>            <span class="hljs-string">&lt;a</span> <span class="hljs-string">class=&quot;category-header&quot;</span> <span class="hljs-string">href=&quot;&lt;%=</span> <span class="hljs-string">url_for(category.path)</span> <span class="hljs-string">%&gt;&quot;&gt;</span><br>              <span class="hljs-string">&lt;span</span> <span class="hljs-string">class=&quot;category-name&quot;&gt;</span><br>                <span class="hljs-string">&lt;i</span> <span class="hljs-string">class=&quot;iconfont</span> <span class="hljs-string">icon-category&quot;</span> <span class="hljs-string">style=&quot;margin-right:6px&quot;&gt;&lt;/i&gt;</span><br>                &lt;%=<span class="language-ruby"> category.name </span>%&gt;<br>              <span class="hljs-string">&lt;/span&gt;</span><br>              <span class="hljs-string">&lt;small&gt;(&lt;%=</span> <span class="hljs-string">category.length</span> <span class="hljs-string">%&gt;)&lt;/small&gt;</span><br>            <span class="hljs-string">&lt;/a&gt;</span><br>            <span class="hljs-string">&lt;ul</span> <span class="hljs-string">class=&quot;category-posts&quot;&gt;</span><br>              &lt;%<span class="language-ruby"> category.posts.slice(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>).forEach(function(post) &#123; </span>%&gt;<br>                <span class="hljs-string">&lt;li&gt;</span><br>                  <span class="hljs-string">&lt;a</span> <span class="hljs-string">href=&quot;&lt;%=</span> <span class="hljs-string">url_for(post.path)</span> <span class="hljs-string">%&gt;&quot;&gt;&lt;%=</span> <span class="hljs-string">post.title</span> <span class="hljs-string">%&gt;&lt;/a&gt;</span><br>                <span class="hljs-string">&lt;/li&gt;</span><br>              &lt;%<span class="language-ruby"> &#125;) </span>%&gt;<br>            <span class="hljs-string">&lt;/ul&gt;</span><br>            &lt;%<span class="language-ruby"> <span class="hljs-keyword">if</span> (category.posts.length &gt; <span class="hljs-number">5</span>) &#123; </span>%&gt;<br>              <span class="hljs-string">&lt;a</span> <span class="hljs-string">class=&quot;more-link&quot;</span> <span class="hljs-string">href=&quot;&lt;%=</span> <span class="hljs-string">url_for(category.path)</span> <span class="hljs-string">%&gt;&quot;&gt;More</span> <span class="hljs-string">&gt;&gt;&lt;/a&gt;</span><br>            &lt;%<span class="language-ruby"> &#125; </span>%&gt;<br>          <span class="hljs-string">&lt;/div&gt;</span><br>        &lt;%<span class="language-ruby"> &#125;) </span>%&gt;<br>      <span class="hljs-string">&lt;/div&gt;</span><br>    &lt;%<span class="language-ruby"> &#125; <span class="hljs-keyword">else</span> &#123; </span>%&gt;<br>      <span class="hljs-string">&lt;p</span> <span class="hljs-string">style=&quot;text-align:center;&quot;&gt;No</span> <span class="hljs-string">categories</span> <span class="hljs-string">found.&lt;/p&gt;</span><br>    &lt;%<span class="language-ruby"> &#125; </span>%&gt;<br>  <span class="hljs-string">&lt;/div&gt;</span><br><span class="hljs-string">&lt;/div&gt;</span><br><br><span class="hljs-string">&lt;!--</span> <span class="hljs-string">样式</span> <span class="hljs-string">--&gt;</span><br><span class="hljs-string">&lt;style&gt;</span><br>  <span class="hljs-string">.category-card-wrapper</span> &#123;<br>    <span class="hljs-attr">display:</span> <span class="hljs-string">flex;</span><br>    <span class="hljs-attr">flex-wrap:</span> <span class="hljs-string">wrap;</span><br>    <span class="hljs-attr">gap:</span> <span class="hljs-number">1.</span><span class="hljs-string">5rem;</span><br>    <span class="hljs-attr">justify-content:</span> <span class="hljs-string">flex-start;</span><br>    <span class="hljs-attr">align-items:</span> <span class="hljs-string">flex-start;</span><br>    <span class="hljs-attr">margin-top:</span> <span class="hljs-string">1rem;</span><br>  &#125;<br><br>  <span class="hljs-string">.category-card</span> &#123;<br>    <span class="hljs-attr">background:</span> <span class="hljs-comment">#f8f9fa;</span><br>    <span class="hljs-attr">border-radius:</span> <span class="hljs-string">10px;</span><br>    <span class="hljs-attr">padding:</span> <span class="hljs-string">1rem</span> <span class="hljs-number">1.</span><span class="hljs-string">25rem;</span><br>    <span class="hljs-attr">box-shadow:</span> <span class="hljs-number">0</span> <span class="hljs-string">2px</span> <span class="hljs-string">8px</span> <span class="hljs-string">rgba(0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.04</span><span class="hljs-string">);</span><br>    <span class="hljs-attr">width:</span> <span class="hljs-number">100</span><span class="hljs-string">%;</span><br>    <span class="hljs-attr">max-width:</span> <span class="hljs-string">320px;</span><br>    <span class="hljs-attr">flex:</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-string">300px;</span><br>    <span class="hljs-attr">display:</span> <span class="hljs-string">flex;</span><br>    <span class="hljs-attr">flex-direction:</span> <span class="hljs-string">column;</span><br>    <span class="hljs-attr">justify-content:</span> <span class="hljs-string">space-between;</span><br>    <span class="hljs-attr">transition:</span> <span class="hljs-string">transform</span> <span class="hljs-number">0.</span><span class="hljs-string">2s</span> <span class="hljs-string">ease;</span><br>  &#125;<br><br>  <span class="hljs-string">.category-card:hover</span> &#123;<br>    <span class="hljs-attr">transform:</span> <span class="hljs-string">translateY(-4px);</span><br>    <span class="hljs-attr">box-shadow:</span> <span class="hljs-number">0</span> <span class="hljs-string">4px</span> <span class="hljs-string">12px</span> <span class="hljs-string">rgba(0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.1</span><span class="hljs-string">);</span><br>  &#125;<br><br>  <span class="hljs-string">.category-header</span> &#123;<br>    <span class="hljs-attr">text-decoration:</span> <span class="hljs-string">none;</span><br>    <span class="hljs-attr">color:</span> <span class="hljs-comment">#333;</span><br>    <span class="hljs-attr">font-weight:</span> <span class="hljs-string">bold;</span><br>    <span class="hljs-attr">font-size:</span> <span class="hljs-number">1.</span><span class="hljs-string">1rem;</span><br>    <span class="hljs-attr">display:</span> <span class="hljs-string">flex;</span><br>    <span class="hljs-attr">justify-content:</span> <span class="hljs-string">space-between;</span><br>    <span class="hljs-attr">align-items:</span> <span class="hljs-string">center;</span><br>    <span class="hljs-attr">margin-bottom:</span> <span class="hljs-number">0.</span><span class="hljs-string">5rem;</span><br>  &#125;<br><br>  <span class="hljs-string">.category-posts</span> &#123;<br>    <span class="hljs-attr">padding-left:</span> <span class="hljs-string">1rem;</span><br>    <span class="hljs-attr">list-style-type:</span> <span class="hljs-string">disc;</span><br>    <span class="hljs-attr">margin:</span> <span class="hljs-number">0</span><span class="hljs-string">;</span><br>    <span class="hljs-attr">font-size:</span> <span class="hljs-number">0.</span><span class="hljs-string">95rem;</span><br>  &#125;<br><br>  <span class="hljs-string">.category-posts</span> <span class="hljs-string">li</span> &#123;<br>    <span class="hljs-attr">margin:</span> <span class="hljs-number">0.</span><span class="hljs-string">25rem</span> <span class="hljs-number">0</span><span class="hljs-string">;</span><br>  &#125;<br><br>  <span class="hljs-string">.category-posts</span> <span class="hljs-string">a</span> &#123;<br>    <span class="hljs-attr">text-decoration:</span> <span class="hljs-string">none;</span><br>    <span class="hljs-attr">color:</span> <span class="hljs-comment">#3498db;</span><br>  &#125;<br><br>  <span class="hljs-string">.category-posts</span> <span class="hljs-string">a:hover</span> &#123;<br>    <span class="hljs-attr">text-decoration:</span> <span class="hljs-string">underline;</span><br>  &#125;<br><br>  <span class="hljs-string">.more-link</span> &#123;<br>    <span class="hljs-attr">margin-top:</span> <span class="hljs-number">0.</span><span class="hljs-string">5rem;</span><br>    <span class="hljs-attr">align-self:</span> <span class="hljs-string">flex-end;</span><br>    <span class="hljs-attr">color:</span> <span class="hljs-comment">#555;</span><br>    <span class="hljs-attr">font-size:</span> <span class="hljs-number">0.</span><span class="hljs-string">88rem;</span><br>    <span class="hljs-attr">text-decoration:</span> <span class="hljs-string">none;</span><br>  &#125;<br><br>  <span class="hljs-string">.more-link:hover</span> &#123;<br>    <span class="hljs-attr">color:</span> <span class="hljs-comment">#3498db;</span><br>  &#125;<br><span class="hljs-string">&lt;/style&gt;</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="可选调试方法"><a href="#可选调试方法" class="headerlink" title="可选调试方法"></a>可选调试方法</h3><h4 id="检查是否启用了："><a href="#检查是否启用了：" class="headerlink" title="检查是否启用了："></a>检查是否启用了：</h4><ul><li><code>.category-card</code> 里是否有 <code>justify-content: space-between</code>（这个会导致下方内容贴底部）；</li><li><code>.category-posts</code> 是否加了 <code>margin-top: auto;</code>；</li></ul><p>这些都应移除或覆盖为顶部对齐。</p><p><img src="/images/20250327/image-20250327150842640.png" alt="image-20250327150842640"></p><hr><h3 id="✅-总结调整关键点"><a href="#✅-总结调整关键点" class="headerlink" title="✅ 总结调整关键点"></a>✅ 总结调整关键点</h3><table><thead><tr><th>元素</th><th>应该设置</th></tr></thead><tbody><tr><td><code>.category-card</code></td><td><code>display: flex; flex-direction: column;</code> ✅</td></tr><tr><td><code>.category-posts</code></td><td><code>margin-top: 0;</code> ✅</td></tr><tr><td>卡片高度</td><td>使用 <code>min-height: 320px</code> 统一 ✅</td></tr></tbody></table><hr><h3 id="4-文章底部Permalink链接对齐"><a href="#4-文章底部Permalink链接对齐" class="headerlink" title="4. 文章底部Permalink链接对齐"></a>4. 文章底部Permalink链接对齐</h3><p>文章底部的Permalink链接超出了文章的宽度限制，需要重新调整到文章大小900px.</p><p><img src="/images/20250327/image-20250327143514509.png" alt="image-20250327143514509"></p><p>需要调整的内容如下：</p><p>D:\Cloud\myBlog\myBlog\themes\hexo-theme-Chic\layout路径下面的post.ejs文件；</p><p>D:\Cloud\myBlog\myBlog\themes\hexo-theme-Chic\layout_page路径下面的post.ejs文件；</p><p>D:\Cloud\myBlog\myBlog\themes\hexo-theme-Chic\source\css路径下面的custom.styl文件；</p><p>✅ <strong>步骤一：给 Permalink 外层加一个容器类</strong></p><p>更新 <code>_page/post.ejs</code> 中版权信息的布局，调整 <code>Permalink</code> 的 <code>word-break</code> 和 <code>margin</code> 样式，确保与其他字段保持左对齐且自动换行。</p><p>🛠 修改说明如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;copyright-item&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Permalink:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;permalink-text&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&lt;%- page.permalink %&gt;&quot;</span>&gt;</span>&lt;%- page.permalink %&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>并在页面底部新增 CSS：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.post-copyright</span> <span class="hljs-selector-class">.copyright-item</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0.5rem</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.post-copyright</span> <span class="hljs-selector-class">.copyright-item</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-class">.permalink-text</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">word-break</span>: break-all;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><hr><p>在D:\Cloud\myBlog\myBlog\themes\hexo-theme-Chic\layout路径下面的post.ejs文件调整为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">&lt;!--</span> <span class="hljs-string">阅读进度条（顶部</span> <span class="hljs-string">+</span> <span class="hljs-string">限定宽度</span> <span class="hljs-string">+</span> <span class="hljs-string">居中）</span> <span class="hljs-string">--&gt;</span><br><span class="hljs-string">&lt;div</span> <span class="hljs-string">id=&quot;reading-progress-container&quot;&gt;</span><br>  <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;reading-progress-wrapper&quot;&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">id=&quot;reading-progress-bar&quot;&gt;&lt;/div&gt;</span><br>  <span class="hljs-string">&lt;/div&gt;</span><br><span class="hljs-string">&lt;/div&gt;</span><br><br>&lt;%-<span class="language-ruby"> partial(<span class="hljs-string">&#x27;_page/post&#x27;</span>, &#123;<span class="hljs-symbol">post:</span> page, <span class="hljs-symbol">index:</span> <span class="hljs-literal">false</span>&#125;) </span>%&gt;<br><br><span class="hljs-string">&lt;!--</span> <span class="hljs-string">阅读信息：固定在右侧目录按钮下方</span> <span class="hljs-string">--&gt;</span><br><span class="hljs-string">&lt;aside</span> <span class="hljs-string">class=&quot;reading-meta-sidebar&quot;&gt;</span><br>  &lt;%<span class="language-ruby"> <span class="hljs-keyword">if</span> (page.wordcount &amp;&amp; page.wordcount &gt; <span class="hljs-number">0</span>) &#123; </span>%&gt;<br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;reading-meta-box&quot;&gt;</span><br>      <span class="hljs-string">&lt;div&gt;📄</span> <span class="hljs-string">字数：&lt;%=</span> <span class="hljs-string">page.wordcount</span> <span class="hljs-string">%&gt;</span> <span class="hljs-string">字&lt;/div&gt;</span><br>      <span class="hljs-string">&lt;div&gt;⏱️</span> <span class="hljs-string">阅读时间：&lt;%=</span> <span class="hljs-string">page.reading_time</span> <span class="hljs-string">%&gt;&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;/div&gt;</span><br>  &lt;%<span class="language-ruby"> &#125; </span>%&gt;<br><span class="hljs-string">&lt;/aside&gt;</span><br><br><span class="hljs-string">&lt;!--</span> <span class="hljs-string">样式</span> <span class="hljs-string">--&gt;</span><br><span class="hljs-string">&lt;style&gt;</span><br>  <span class="hljs-comment">#reading-progress-container &#123;</span><br>    <span class="hljs-attr">position:</span> <span class="hljs-string">fixed;</span><br>    <span class="hljs-attr">top:</span> <span class="hljs-number">0</span><span class="hljs-string">;</span><br>    <span class="hljs-attr">left:</span> <span class="hljs-number">0</span><span class="hljs-string">;</span><br>    <span class="hljs-attr">width:</span> <span class="hljs-number">100</span><span class="hljs-string">%;</span><br>    <span class="hljs-attr">height:</span> <span class="hljs-string">4px;</span><br>    <span class="hljs-attr">background:</span> <span class="hljs-string">transparent;</span><br>    <span class="hljs-attr">z-index:</span> <span class="hljs-number">9999</span><span class="hljs-string">;</span><br>    <span class="hljs-attr">pointer-events:</span> <span class="hljs-string">none;</span><br>  <span class="hljs-string">&#125;</span><br><br>  <span class="hljs-string">.reading-progress-wrapper</span> &#123;<br>    <span class="hljs-attr">max-width:</span> <span class="hljs-string">800px;</span><br>    <span class="hljs-attr">margin:</span> <span class="hljs-number">0</span> <span class="hljs-string">auto;</span><br>    <span class="hljs-attr">height:</span> <span class="hljs-number">100</span><span class="hljs-string">%;</span><br>    <span class="hljs-attr">background:</span> <span class="hljs-string">transparent;</span><br>  &#125;<br><br>  <span class="hljs-comment">#reading-progress-bar &#123;</span><br>    <span class="hljs-attr">height:</span> <span class="hljs-number">100</span><span class="hljs-string">%;</span><br>    <span class="hljs-attr">width:</span> <span class="hljs-number">0</span><span class="hljs-string">%;</span><br>    <span class="hljs-attr">background-color:</span> <span class="hljs-comment">#3498db;</span><br>    <span class="hljs-attr">transition:</span> <span class="hljs-string">width</span> <span class="hljs-number">0.</span><span class="hljs-string">2s</span> <span class="hljs-string">ease-out;</span><br>  <span class="hljs-string">&#125;</span><br><br>  <span class="hljs-string">/*</span> <span class="hljs-string">固定在目录按钮下方的阅读信息</span> <span class="hljs-string">*/</span><br>  <span class="hljs-string">.reading-meta-sidebar</span> &#123;<br>    <span class="hljs-attr">position:</span> <span class="hljs-string">fixed;</span><br>    <span class="hljs-attr">top:</span> <span class="hljs-string">220px;</span> <span class="hljs-string">/*</span> <span class="hljs-string">✅</span> <span class="hljs-string">调整此值来控制距顶部高度</span> <span class="hljs-string">*/</span><br>    <span class="hljs-attr">right:</span> <span class="hljs-string">30px;</span><br>    <span class="hljs-attr">font-size:</span> <span class="hljs-number">0.</span><span class="hljs-string">88rem;</span><br>    <span class="hljs-attr">color:</span> <span class="hljs-comment">#888;</span><br>    <span class="hljs-attr">background:</span> <span class="hljs-comment">#f9f9f9;</span><br>    <span class="hljs-attr">padding:</span> <span class="hljs-number">0.</span><span class="hljs-string">75rem</span> <span class="hljs-string">1rem;</span><br>    <span class="hljs-attr">border-radius:</span> <span class="hljs-string">6px;</span><br>    <span class="hljs-attr">box-shadow:</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-string">6px</span> <span class="hljs-string">rgba(0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.05</span><span class="hljs-string">);</span><br>    <span class="hljs-attr">z-index:</span> <span class="hljs-number">999</span><span class="hljs-string">;</span><br>    <span class="hljs-attr">line-height:</span> <span class="hljs-number">1.6</span><span class="hljs-string">;</span><br>    <span class="hljs-attr">pointer-events:</span> <span class="hljs-string">none;</span><br>  &#125;<br><br>  <span class="hljs-string">.reading-meta-box</span> &#123;<br>    <span class="hljs-attr">text-align:</span> <span class="hljs-string">left;</span><br>  &#125;<br><br>  <span class="hljs-string">.permalink-container</span> &#123;<br>    <span class="hljs-attr">max-width:</span> <span class="hljs-string">900px;</span><br>    <span class="hljs-attr">margin:</span> <span class="hljs-string">1rem</span> <span class="hljs-string">auto;</span><br>    <span class="hljs-attr">padding:</span> <span class="hljs-number">0</span> <span class="hljs-string">1rem;</span><br>    <span class="hljs-attr">word-break:</span> <span class="hljs-string">break-all;</span><br>    <span class="hljs-attr">text-align:</span> <span class="hljs-string">center;</span><br>  &#125;<br>  <span class="hljs-string">.permalink-container</span> <span class="hljs-string">a</span> &#123;<br>    <span class="hljs-attr">color:</span> <span class="hljs-comment">#3498db;</span><br>    <span class="hljs-attr">font-size:</span> <span class="hljs-number">0.</span><span class="hljs-string">9rem;</span><br>  &#125;<br><span class="hljs-string">&lt;/style&gt;</span><br><br><span class="hljs-string">&lt;!--</span> <span class="hljs-string">脚本</span> <span class="hljs-string">--&gt;</span><br><span class="hljs-string">&lt;script&gt;</span><br>  <span class="hljs-string">window.addEventListener(&#x27;scroll&#x27;,</span> <span class="hljs-string">()</span> <span class="hljs-string">=&gt;</span> &#123;<br>    <span class="hljs-string">const</span> <span class="hljs-string">scrollTop</span> <span class="hljs-string">=</span> <span class="hljs-string">window.scrollY</span> <span class="hljs-string">||</span> <span class="hljs-string">document.documentElement.scrollTop;</span><br>    <span class="hljs-string">const</span> <span class="hljs-string">scrollHeight</span> <span class="hljs-string">=</span> <span class="hljs-string">document.documentElement.scrollHeight</span> <span class="hljs-bullet">-</span> <span class="hljs-string">document.documentElement.clientHeight;</span><br>    <span class="hljs-string">const</span> <span class="hljs-string">progress</span> <span class="hljs-string">=</span> <span class="hljs-string">(scrollTop</span> <span class="hljs-string">/</span> <span class="hljs-string">scrollHeight)</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span><span class="hljs-string">;</span><br>    <span class="hljs-string">document.getElementById(&#x27;reading-progress-bar&#x27;).style.width</span> <span class="hljs-string">=</span> <span class="hljs-string">progress</span> <span class="hljs-string">+</span> <span class="hljs-string">&#x27;%&#x27;</span><span class="hljs-string">;</span><br>  &#125;<span class="hljs-string">);</span><br><span class="hljs-string">&lt;/script&gt;</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="✅-步骤二：在-custom-styl-中添加样式"><a href="#✅-步骤二：在-custom-styl-中添加样式" class="headerlink" title="✅ 步骤二：在 custom.styl 中添加样式"></a>✅ <strong>步骤二：在 <code>custom.styl</code> 中添加样式</strong></h3><p>打开你的：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs gradle">themes<span class="hljs-regexp">/hexo-theme-chic/</span><span class="hljs-keyword">source</span><span class="hljs-regexp">/css/</span>custom.styl<br></code></pre></div></td></tr></table></figure><p>添加以下内容 👇：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs pgsql">.permalink-<span class="hljs-keyword">wrapper</span><br>  max-width: <span class="hljs-number">900</span>px<br>  margin: <span class="hljs-number">0</span> auto<br>  word-wrap: break-word<br>  padding: <span class="hljs-number">0.5</span>rem <span class="hljs-number">1</span>rem<br>  <span class="hljs-type">text</span>-align: left<br><br>.permalink-<span class="hljs-keyword">wrapper</span> a<br>  word-break: break-<span class="hljs-keyword">all</span><br>  display: <span class="hljs-keyword">inline</span>-block<br></code></pre></div></td></tr></table></figure><p><img src="/images/20250327/image-20250327145808756.png" alt="image-20250327145808756"></p><hr><h2 id="常用部署命令"><a href="#常用部署命令" class="headerlink" title="常用部署命令"></a>常用部署命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs bash">hexo clean     <span class="hljs-comment"># 清除缓存</span><br>hexo g         <span class="hljs-comment"># 生成静态文件</span><br>hexo d         <span class="hljs-comment"># 部署到 GitHub</span><br></code></pre></div></td></tr></table></figure><hr><p>📬 如有问题，欢迎联系我：<br>📧 <code>cy2102056@gmail.com</code></p>]]></content>
      
      
      <categories>
          
          <category> Blog Building </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 GitHub 搭建自己的博客？- 入门教程（3）</title>
      <link href="/2025/03/26/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%9F-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%883%EF%BC%89/"/>
      <url>/2025/03/26/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%9F-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%883%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="✅-本文优化内容概览："><a href="#✅-本文优化内容概览：" class="headerlink" title="✅ 本文优化内容概览："></a>✅ 本文优化内容概览：</h2><ol><li>增加进度条功能，进度条显示从左到右，宽度与文章内容大小保持一致；</li><li>增加搜索Search功能，放在右上角，搜索界面放在网页的中间位置，仿照google.com的界面，进行美化优化；</li><li>增加网页访客浏览量统计功能；</li><li>进度条功能与网页统计功能冲突；</li></ol><p>编辑工具推荐：<strong>Typora</strong>（Markdown 编辑）</p><hr><h2 id="1️⃣-添加阅读进度条"><a href="#1️⃣-添加阅读进度条" class="headerlink" title="1️⃣ 添加阅读进度条"></a>1️⃣ 添加阅读进度条</h2><p>为了提升用户体验，我们在页面顶部加入阅读进度条，随滚动条同步增加，且宽度与文章区域保持一致。</p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>原设置如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs css"><span class="hljs-selector-id">#reading-progress-bar</span> &#123;<br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">900px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>进度条宽度未生效，原因是其父容器使用了 <code>position: fixed</code>，导致 <code>margin: auto</code> 无效。</p><h3 id="正确实现方式"><a href="#正确实现方式" class="headerlink" title="正确实现方式"></a>正确实现方式</h3><p>需新增一个居中容器 <code>.reading-progress-wrapper</code> 包裹进度条：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reading-progress-container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;reading-progress-wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reading-progress-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>并使用如下样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs css"><span class="hljs-selector-class">.reading-progress-wrapper</span> &#123;<br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">900px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-selector-id">#reading-progress-bar</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">0%</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#3498db</span>;<br>  <span class="hljs-attribute">transition</span>: width <span class="hljs-number">0.2s</span> ease-out;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>添加滚动脚本即可实现动态增长。</p><hr><h2 id="2️⃣-优化站内搜索功能"><a href="#2️⃣-优化站内搜索功能" class="headerlink" title="2️⃣ 优化站内搜索功能"></a>2️⃣ 优化站内搜索功能</h2><h3 id="修改导航菜单"><a href="#修改导航菜单" class="headerlink" title="修改导航菜单"></a>修改导航菜单</h3><p>打开主题配置文件 <code>themes/hexo-theme-Chic/_config.yml</code>，添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">Search:</span> <span class="hljs-string">/search</span><br></code></pre></div></td></tr></table></figure><h3 id="美化搜索页面"><a href="#美化搜索页面" class="headerlink" title="美化搜索页面"></a>美化搜索页面</h3><p>修改 <code>themes/hexo-theme-Chic/layout/search.ejs</code>，应用居中 + 搜索框样式，仿照 Google 首页风格（略）。</p><h3 id="启用本地搜索插件"><a href="#启用本地搜索插件" class="headerlink" title="启用本地搜索插件"></a>启用本地搜索插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs bash">npm install hexo-generator-search --save<br></code></pre></div></td></tr></table></figure><p>配置 <code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-attr">search:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">search.xml</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span><br>  <span class="hljs-attr">format:</span> <span class="hljs-string">html</span><br>  <span class="hljs-attr">limit:</span> <span class="hljs-number">100</span><br></code></pre></div></td></tr></table></figure><p>然后执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yam">hexo clean &amp;&amp; hexo g<br></code></pre></div></td></tr></table></figure><p>示例图片如下：</p><p><img src="/images/20250326/image-20250326142618040.png" alt="image-20250326142618040"></p><hr><h2 id="3️⃣-集成访问量统计功能"><a href="#3️⃣-集成访问量统计功能" class="headerlink" title="3️⃣ 集成访问量统计功能"></a>3️⃣ 集成访问量统计功能</h2><h3 id="方案一：Busuanzi（不蒜子）"><a href="#方案一：Busuanzi（不蒜子）" class="headerlink" title="方案一：Busuanzi（不蒜子）"></a>方案一：Busuanzi（不蒜子）</h3><p>适合展示全站访问量 &#x2F; 访客量。</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>在 <code>layout/_partial/footer.ejs</code> 中添加：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span><br>  本站总访问量 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 次<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> |<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span><br>  本站访客数 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 人<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>推荐样式：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs css"><span class="hljs-selector-id">#busuanzi_container_site_pv</span>,<br><span class="hljs-selector-id">#busuanzi_container_site_uv</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.9rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="示例效果："><a href="#示例效果：" class="headerlink" title="示例效果："></a>示例效果：</h3><blockquote><p>本站总访问量 12345 次 | 本站访客数 6789 人</p></blockquote><hr><h3 id="方案二：Google-Analytics（GA4）"><a href="#方案二：Google-Analytics（GA4）" class="headerlink" title="方案二：Google Analytics（GA4）"></a>方案二：Google Analytics（GA4）</h3><h4 id="创建账户"><a href="#创建账户" class="headerlink" title="创建账户"></a>创建账户</h4><p>访问 <a href="https://analytics.google.com/">analytics.google.com</a>，并创建 GA4 数据流，获取你的 GA ID，格式为 <code>G-XXXXXXXXXX</code>。</p><h4 id="插入代码"><a href="#插入代码" class="headerlink" title="插入代码"></a>插入代码</h4><p>在 <code>layout/_partial/head.ejs</code> 的 <code>&lt;head&gt;</code> 结尾前加入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">&lt;script</span> <span class="hljs-string">async</span> <span class="hljs-string">src=&quot;https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">&lt;script&gt;</span><br>  <span class="hljs-string">window.dataLayer</span> <span class="hljs-string">=</span> <span class="hljs-string">window.dataLayer</span> <span class="hljs-string">||</span> []<span class="hljs-string">;</span><br>  <span class="hljs-string">function</span> <span class="hljs-string">gtag()&#123;</span> <span class="hljs-string">dataLayer.push(arguments);</span> <span class="hljs-string">&#125;</span><br>  <span class="hljs-string">gtag(&#x27;js&#x27;,</span> <span class="hljs-string">new</span> <span class="hljs-string">Date());</span><br>  <span class="hljs-string">gtag(&#x27;config&#x27;,</span> <span class="hljs-string">&#x27;G-XXXXXXXXXX&#x27;</span><span class="hljs-string">);</span><br><span class="hljs-string">&lt;/script&gt;</span><br></code></pre></div></td></tr></table></figure><p>示例图片如下：</p><p><img src="/images/20250326/image-20250326142013325.png" alt="image-20250326142013325"></p><hr><h3 id="4-进度条功能与网页统计功能冲突"><a href="#4-进度条功能与网页统计功能冲突" class="headerlink" title="4. 进度条功能与网页统计功能冲突"></a>4. 进度条功能与网页统计功能冲突</h3><p>在网页功能修改完毕之后，发现进度条功能又出现错误，具体表现为，进度条不会随着阅读进度的变化而发生变化。</p><p>经过还原之前的备份文件与当前文件进行对比，确定问题出在了路径D:\Cloud\myBlog\myBlog\themes\hexo-theme-Chic\layout_partial下的文件footer.ejs下。</p><p>这很可能是因为：</p><blockquote><p>你将 <code>#reading-progress-bar</code> 放在 <code>.progress-wrapper</code> 内，但其样式设定了 <code>max-width</code> 限制或 <code>margin auto</code>，与 <code>position: fixed</code> 父元素结构不兼容，导致无法正确拉伸。</p></blockquote><h3 id="✅-解决方案：结构-样式一起修正"><a href="#✅-解决方案：结构-样式一起修正" class="headerlink" title="✅ 解决方案：结构 + 样式一起修正"></a>✅ 解决方案：结构 + 样式一起修正</h3><p>请将你当前的 <code>footer.ejs</code> 文件<strong>替换为以下内容</strong>，该版本确保：</p><ol><li>阅读进度条跨屏显示（支持整屏宽度、内容居中）；</li><li>Busuanzi 正常显示；</li><li>样式逻辑清晰、模块分明。.</li></ol><p>具体代码为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">&lt;!--</span> <span class="hljs-string">阅读进度条容器：铺满屏幕顶部</span> <span class="hljs-string">--&gt;</span><br><span class="hljs-string">&lt;div</span> <span class="hljs-string">id=&quot;reading-progress-container&quot;&gt;</span><br>  <span class="hljs-string">&lt;div</span> <span class="hljs-string">id=&quot;reading-progress-bar&quot;&gt;&lt;/div&gt;</span><br><span class="hljs-string">&lt;/div&gt;</span><br><br><span class="hljs-string">&lt;footer</span> <span class="hljs-string">id=&quot;footer&quot;</span> <span class="hljs-string">class=&quot;footer&quot;&gt;</span><br>  <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;copyright&quot;&gt;</span><br>    <span class="hljs-string">&lt;div&gt;</span><br>      <span class="hljs-string">©</span> &lt;%=<span class="language-ruby"> config.author </span>%&gt; <span class="hljs-string">|</span> <span class="hljs-string">Powered</span> <span class="hljs-string">by</span> <br>      <span class="hljs-string">&lt;a</span> <span class="hljs-string">href=&quot;https://hexo.io&quot;</span> <span class="hljs-string">target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt;</span> <span class="hljs-string">&amp;</span> <br>      <span class="hljs-string">&lt;a</span> <span class="hljs-string">href=&quot;https://github.com/Siricee/hexo-theme-Chic&quot;</span> <span class="hljs-string">target=&quot;_blank&quot;&gt;Chic&lt;/a&gt;</span><br>    <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;busuanzi-box&quot;&gt;</span><br>      <span class="hljs-string">&lt;span</span> <span class="hljs-string">id=&quot;busuanzi_container_site_pv&quot;</span> <span class="hljs-string">style=&quot;display:none&quot;&gt;</span><br>        <span class="hljs-string">本站总访问量</span> <span class="hljs-string">&lt;span</span> <span class="hljs-string">id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;</span> <span class="hljs-string">次</span><br>      <span class="hljs-string">&lt;/span&gt;</span><br>      <span class="hljs-string">|</span><br><span class="hljs-string">      &lt;span id=&quot;busuanzi_container_site_uv&quot; style=&quot;display:none&quot;&gt;</span><br><span class="hljs-string">        本站访客数 &lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt; 人</span><br><span class="hljs-string">      &lt;/span&gt;</span><br><span class="hljs-string"></span>    <span class="hljs-string">&lt;/div&gt;</span><br>  <span class="hljs-string">&lt;/div&gt;</span><br><span class="hljs-string">&lt;/footer&gt;</span><br><br><span class="hljs-string">&lt;!--</span> <span class="hljs-string">样式</span> <span class="hljs-string">--&gt;</span><br><span class="hljs-string">&lt;style&gt;</span><br>  <span class="hljs-string">/*</span> <span class="hljs-string">阅读进度条样式</span> <span class="hljs-string">*/</span><br>  <span class="hljs-comment">#reading-progress-container &#123;</span><br>    <span class="hljs-attr">position:</span> <span class="hljs-string">fixed;</span><br>    <span class="hljs-attr">top:</span> <span class="hljs-number">0</span><span class="hljs-string">;</span><br>    <span class="hljs-attr">left:</span> <span class="hljs-number">0</span><span class="hljs-string">;</span><br>    <span class="hljs-attr">width:</span> <span class="hljs-number">100</span><span class="hljs-string">%;</span><br>    <span class="hljs-attr">height:</span> <span class="hljs-string">4px;</span><br>    <span class="hljs-attr">background:</span> <span class="hljs-string">transparent;</span><br>    <span class="hljs-attr">z-index:</span> <span class="hljs-number">9999</span><span class="hljs-string">;</span><br>    <span class="hljs-attr">pointer-events:</span> <span class="hljs-string">none;</span><br>  <span class="hljs-string">&#125;</span><br><br>  <span class="hljs-comment">#reading-progress-bar &#123;</span><br>    <span class="hljs-attr">height:</span> <span class="hljs-number">100</span><span class="hljs-string">%;</span><br>    <span class="hljs-attr">width:</span> <span class="hljs-number">0</span><span class="hljs-string">%;</span><br>    <span class="hljs-attr">background-color:</span> <span class="hljs-comment">#3498db;</span><br>    <span class="hljs-attr">transition:</span> <span class="hljs-string">width</span> <span class="hljs-number">0.</span><span class="hljs-string">2s</span> <span class="hljs-string">ease-out;</span><br>  <span class="hljs-string">&#125;</span><br><br>  <span class="hljs-string">/*</span> <span class="hljs-string">不蒜子样式</span> <span class="hljs-string">*/</span><br>  <span class="hljs-string">.busuanzi-box</span> &#123;<br>    <span class="hljs-attr">font-size:</span> <span class="hljs-number">0.</span><span class="hljs-string">9rem;</span><br>    <span class="hljs-attr">color:</span> <span class="hljs-comment">#999;</span><br>    <span class="hljs-attr">margin-top:</span> <span class="hljs-string">5px;</span><br>  &#125;<br><span class="hljs-string">&lt;/style&gt;</span><br><br><span class="hljs-string">&lt;!--</span> <span class="hljs-string">阅读进度条脚本</span> <span class="hljs-string">--&gt;</span><br><span class="hljs-string">&lt;script&gt;</span><br>  <span class="hljs-string">window.addEventListener(&#x27;scroll&#x27;,</span> <span class="hljs-string">()</span> <span class="hljs-string">=&gt;</span> &#123;<br>    <span class="hljs-string">const</span> <span class="hljs-string">scrollTop</span> <span class="hljs-string">=</span> <span class="hljs-string">window.scrollY</span> <span class="hljs-string">||</span> <span class="hljs-string">document.documentElement.scrollTop;</span><br>    <span class="hljs-string">const</span> <span class="hljs-string">scrollHeight</span> <span class="hljs-string">=</span> <span class="hljs-string">document.documentElement.scrollHeight</span> <span class="hljs-bullet">-</span> <span class="hljs-string">document.documentElement.clientHeight;</span><br>    <span class="hljs-string">const</span> <span class="hljs-string">progress</span> <span class="hljs-string">=</span> <span class="hljs-string">(scrollTop</span> <span class="hljs-string">/</span> <span class="hljs-string">scrollHeight)</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span><span class="hljs-string">;</span><br>    <span class="hljs-string">document.getElementById(&#x27;reading-progress-bar&#x27;).style.width</span> <span class="hljs-string">=</span> <span class="hljs-string">progress</span> <span class="hljs-string">+</span> <span class="hljs-string">&#x27;%&#x27;</span><span class="hljs-string">;</span><br>  &#125;<span class="hljs-string">);</span><br><span class="hljs-string">&lt;/script&gt;</span><br><br><span class="hljs-string">&lt;!--</span> <span class="hljs-string">不蒜子统计脚本</span> <span class="hljs-string">--&gt;</span><br><span class="hljs-string">&lt;script</span> <span class="hljs-string">async</span> <span class="hljs-string">src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="常用部署命令"><a href="#常用部署命令" class="headerlink" title="常用部署命令"></a>常用部署命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs bash">hexo clean     <span class="hljs-comment"># 清除缓存</span><br>hexo g         <span class="hljs-comment"># 生成静态文件</span><br>hexo d         <span class="hljs-comment"># 部署到 GitHub</span><br></code></pre></div></td></tr></table></figure><hr><p>📬 如有问题，欢迎联系我：<br>📧 <code>cy2102056@gmail.com</code></p>]]></content>
      
      
      <categories>
          
          <category> Blog Building </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 GitHub 搭建自己的博客？- 入门教程（2）</title>
      <link href="/2025/03/25/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%9F-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%882%EF%BC%89/"/>
      <url>/2025/03/25/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%9F-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文将进一步介绍如何优化 Hexo 博客的功能与外观，包括分类与标签页面、代码高亮、评论系统等。</p></blockquote><p>📌 <strong>参考链接：</strong></p><ul><li><a href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css">Highlight.js 代码高亮样式 - Atom One Dark</a></li></ul><hr><h2 id="✅-本文优化内容概览："><a href="#✅-本文优化内容概览：" class="headerlink" title="✅ 本文优化内容概览："></a>✅ 本文优化内容概览：</h2><ol><li>Categories 分类跳转功能（新增：<code>Blog Building</code>、<code>C++ Program</code>）</li><li>Tags 标签跳转功能（新增：<code>Blog</code>、<code>Study</code>）</li><li>Categories 与 Tags 页面视觉优化：<ul><li>卡片式标签布局</li><li>支持页面明暗模式同步</li><li>标签边缘圆角处理</li></ul></li><li>About 页面设置跳转，显示邮箱联系方式，采用卡片样式美化排版</li><li>引入 <code>atom-one-dark</code> 主题，实现代码高亮展示</li><li>博客文章底部增加 Giscus 评论区，评论宽度与正文一致</li></ol><p>编辑工具推荐：<strong>Typora</strong>（Markdown 编辑）</p><hr><h2 id="1-tag-category-与-tags-categories-的区别"><a href="#1-tag-category-与-tags-categories-的区别" class="headerlink" title="1. tag &#x2F; category 与 tags &#x2F; categories 的区别"></a>1. <code>tag</code> &#x2F; <code>category</code> 与 <code>tags</code> &#x2F; <code>categories</code> 的区别</h2><p>在 Hexo 中，**<code>tag.ejs</code> &#x2F; <code>category.ejs</code>** 是主题默认模板，但 <strong><code>tags.ejs</code> &#x2F; <code>categories.ejs</code></strong> 页面并未自动生成。<br>因此需要你在路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs bash">themes/hexo-theme-Chic/layout<br></code></pre></div></td></tr></table></figure><p>手动创建：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs stylus">tags<span class="hljs-selector-class">.ejs</span><br>categories.ejs<br></code></pre></div></td></tr></table></figure><p>示例截图：</p><p><img src="/images/20250325/image-20250325102648405.png" alt="image-20250325102648405"></p><hr><h2 id="2-Categories-分类设置"><a href="#2-Categories-分类设置" class="headerlink" title="2. Categories 分类设置"></a>2. Categories 分类设置</h2><p>每篇文章建议仅设置一个主分类，格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-attr">categories:</span> <span class="hljs-string">Blog</span> <span class="hljs-string">Building</span><br></code></pre></div></td></tr></table></figure><hr><h2 id="3-标签与分类页面优化建议"><a href="#3-标签与分类页面优化建议" class="headerlink" title="3. 标签与分类页面优化建议"></a>3. 标签与分类页面优化建议</h2><p>建议参照 ChatGPT 的卡片式美化方案，或自行探索更多主题模板：<br>👉 <a href="https://hexo.io/themes/">Hexo Themes 官方主题市场</a></p><hr><h2 id="Hexo-常用部署命令"><a href="#Hexo-常用部署命令" class="headerlink" title="Hexo 常用部署命令"></a>Hexo 常用部署命令</h2><p>确保本地修改及时同步至 GitHub，可按以下顺序操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo d<br></code></pre></div></td></tr></table></figure><hr><h2 id="4-Atom-One-Dark-代码高亮配置"><a href="#4-Atom-One-Dark-代码高亮配置" class="headerlink" title="4. Atom One Dark 代码高亮配置"></a>4. Atom One Dark 代码高亮配置</h2><p>原始的 <code>.css</code> 文件可能无法通过 <code>@import</code> 导入 Stylus。<br>因此，建议直接在 HTML 中通过 CDN 引入：</p><p> 修改路径：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs awk">themes<span class="hljs-regexp">/hexo-theme-Chic/</span>layout<span class="hljs-regexp">/_partial/</span>head.ejs<br></code></pre></div></td></tr></table></figure><p>添加以下内容到 <code>&lt;head&gt;</code> 标签中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Highlight.js style: Atom One Dark --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>同时，请确保主配置文件 <code>_config.yml</code> 包含如下设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-attr">syntax_highlighter:</span> <span class="hljs-string">highlight.js</span><br><br><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tab_replace:</span><br>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hljs:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># ✅ 重要！必须启用才能让 &lt;pre&gt;&lt;code&gt; 使用 hljs 样式</span><br></code></pre></div></td></tr></table></figure><hr><h2 id="5-Giscus-评论系统集成"><a href="#5-Giscus-评论系统集成" class="headerlink" title="5. Giscus 评论系统集成"></a>5. Giscus 评论系统集成</h2><p>Giscus 是一个基于 GitHub Discussions 的评论系统。使用前请确认仓库为 <code>public</code>，并确保：</p><ol><li>已正确安装 Giscus 应用至你的 GitHub 账户；</li><li>已启用对应仓库的 Discussions 功能；</li><li>仓库地址配置正确；</li></ol><p>🔗 Giscus 官网：<a href="https://giscus.app/zh-CN">https://giscus.app/zh-CN</a></p><p>📸 设置示例：</p><p><img src="/images/20250325/image-20250325104429047.png" alt="image-20250325104429047"></p><p><img src="/images/20250325/image-20250325104459223.png" alt="image-20250325104459223"></p><hr><p>📬 如果你在配置中遇到任何问题，欢迎通过邮箱联系我：<br><code>cy2102056@gmail.com</code></p>]]></content>
      
      
      <categories>
          
          <category> Blog Building </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 GitHub 搭建自己的博客？- 入门教程（1）</title>
      <link href="/2025/03/21/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%9F-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%881%EF%BC%89/"/>
      <url>/2025/03/21/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%9F-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>本文参考链接如下：</p><ul><li>哔哩哔哩视频：<a href="https://www.bilibili.com/video/BV1Eg41157tL/?spm_id_from=333.337.search-card.all.click">【教程】Hexo &amp; GitHub 搭建自己的专属博客</a>  </li><li>百度网盘文件（主题和教程 PDF）：<br>链接：<a href="https://pan.baidu.com/s/1lZNI9BbnDl_wzrqU7DAmxA">https://pan.baidu.com/s/1lZNI9BbnDl_wzrqU7DAmxA</a><br>提取码：<code>2ez8</code></li></ul><p>经过半天时间的搭建，最终完成了个人博客的初步构建。<br>在此对整个搭建过程做一个简要的记录，供自己和他人参考。</p><p>编辑工具：泗洪 Typora（用于编辑 Markdown 格式）</p><hr><h3 id="1-注意-Git-与-cmd-的区别"><a href="#1-注意-Git-与-cmd-的区别" class="headerlink" title="1. 注意 Git 与 cmd 的区别"></a>1. 注意 Git 与 cmd 的区别</h3><p>在文档《Hexo + GitHub 搭建自己的专属博客》的第一部分，安装完毕之后查看是否成功，可以在 Windows 下按 <code>Win + R</code> 输入 <code>cmd</code> 打开命令提示符，然后输入以下指令：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">git</span> <span class="hljs-string">version</span><br><span class="hljs-string">node</span> <span class="hljs-string">-v</span><br><span class="hljs-string">npm</span> <span class="hljs-string">-v</span><br></code></pre></div></td></tr></table></figure><p>这些命令<strong>应在 cmd 命令行中执行</strong>，而不是 Git Bash。执行结果如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">C:\Users\11360&gt;git</span> <span class="hljs-string">version</span><br><span class="hljs-string">git</span> <span class="hljs-string">version</span> <span class="hljs-number">2.49</span><span class="hljs-number">.0</span><span class="hljs-string">.windows.1</span><br><br><span class="hljs-string">C:\Users\11360&gt;node</span> <span class="hljs-string">-v</span><br><span class="hljs-string">v22.14.0</span><br><br><span class="hljs-string">C:\Users\11360&gt;npm</span> <span class="hljs-string">-v</span><br><span class="hljs-number">10.9</span><span class="hljs-number">.2</span><br></code></pre></div></td></tr></table></figure><h3 id="2-部署主题"><a href="#2-部署主题" class="headerlink" title="2. 部署主题"></a>2. 部署主题</h3><p>在配置 Hexo 主题时，我曾遇到一个报错。路径如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">D:\Cloud\myBlog\themes\hexo-theme-Chic</span><br></code></pre></div></td></tr></table></figure><p>该主题目录中有一个 <code>*_config.yml*</code> 文件。需要注意的是：<strong>Hexo 项目中存在两个 <code>_config.yml</code> 文件</strong>：</p><ul><li>项目根目录下的 <code>_config.yml</code>：控制全局配置</li><li>主题文件夹下的 <code>_config.yml</code>：控制主题样式和内容</li></ul><p>报错内容如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs markdown">description: |<br>  <span class="hljs-strong">**Passion makes every day different.**</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br>  <span class="hljs-emphasis">*Aerospace and programming enthusiasts, welcome to communicate.*</span><br>avatar: /image/avatar.jpg<br></code></pre></div></td></tr></table></figure><p><strong>说明：</strong><br> 第一种写法在 YAML 中可能会导致解析错误，因为 <code>&quot;</code> 引号中混入了 <code>&lt;br&gt;</code> HTML 标签，YAML 会难以正确处理。使用 <code>|</code> 多行文本格式可避免解析问题。</p><h3 id="3-GitHub-新建库"><a href="#3-GitHub-新建库" class="headerlink" title="3. GitHub 新建库"></a>3. GitHub 新建库</h3><p>这方面尤其需要注意 <strong>仓库命名规则</strong>。本次搭建过程中，GitHub 仓库名称<strong>必须严格按照以下格式命名</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">用户名.github.io</span><br></code></pre></div></td></tr></table></figure><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">yangchen461.github.io</span><br></code></pre></div></td></tr></table></figure><p>命名要点如下：</p><ul><li>“用户名”应与你的 GitHub 用户名保持一致</li><li>后缀 <code>.github.io</code> 必不可少，用于 GitHub Pages 识别</li></ul><hr><p>GitHub 仓库命名与 Hexo 部署配置紧密相关，需要在博客根目录的 <code>_config.yml</code> 中指定正确的仓库地址和分支：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:yangchen461/yangchen461.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></div></td></tr></table></figure><hr><p>✅ 小贴士：每次部署前可以执行以下命令，确保更新生效：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">clean</span><br><span class="hljs-string">hexo</span> <span class="hljs-string">g</span><br><span class="hljs-string">hexo</span> <span class="hljs-string">d</span><br></code></pre></div></td></tr></table></figure><h3 id="4-配置-SSH-与部署注意事项（重点）"><a href="#4-配置-SSH-与部署注意事项（重点）" class="headerlink" title="4. 配置 SSH 与部署注意事项（重点）"></a>4. 配置 SSH 与部署注意事项（重点）</h3><p>这一部分是我认为最麻烦的一步，特别是 SSH 配置和 GitHub Pages 设置，建议重点关注。</p><hr><h3 id="1-查看自己的-SSH-Key"><a href="#1-查看自己的-SSH-Key" class="headerlink" title="1. 查看自己的 SSH Key"></a>1. 查看自己的 SSH Key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></div></td></tr></table></figure><p>如果没有生成过 SSH Key，可以使用以下命令创建：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">ssh-keygen</span> <span class="hljs-string">-t</span> <span class="hljs-string">rsa</span> <span class="hljs-string">-C</span> <span class="hljs-string">&quot;你的邮箱&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-验证-SSH-是否添加成功"><a href="#2-验证-SSH-是否添加成功" class="headerlink" title="2. 验证 SSH 是否添加成功"></a>2. 验证 SSH 是否添加成功</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">ssh</span> <span class="hljs-string">-T</span> <span class="hljs-string">git@github.com</span><br></code></pre></div></td></tr></table></figure><p>如果终端返回以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">Hi</span> <span class="hljs-string">xxx!</span> <span class="hljs-string">You&#x27;ve</span> <span class="hljs-string">successfully</span> <span class="hljs-string">authenticated,</span> <span class="hljs-string">but</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">does</span> <span class="hljs-string">not</span> <span class="hljs-string">provide</span> <span class="hljs-string">shell</span> <span class="hljs-string">access.</span><br></code></pre></div></td></tr></table></figure><p>说明 SSH 配置成功。</p><p>⚠️ 注意：这一步必须在 GitHub 中添加 SSH Key 后再进行验证。</p><hr><h3 id="3-关于-GitHub-仓库分支（main-与-master）"><a href="#3-关于-GitHub-仓库分支（main-与-master）" class="headerlink" title="3. 关于 GitHub 仓库分支（main 与 master）"></a>3. 关于 GitHub 仓库分支（main 与 master）</h3><p>GitHub 默认分支通常为 <code>main</code>，而 Hexo 默认使用 <code>master</code> 分支部署。需要手动在 <code>_config.yml</code> 文件中指定部署分支为 <code>master</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:yangchen461/yangchen461.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></div></td></tr></table></figure><p>然后运行以下命令：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">g</span>   <span class="hljs-comment"># 生成静态文件</span><br><span class="hljs-string">hexo</span> <span class="hljs-string">d</span>   <span class="hljs-comment"># 部署到 GitHub</span><br></code></pre></div></td></tr></table></figure><p>此时会将本地生成的博客内容上传到 GitHub，但注意仓库的 <code>main</code> 分支仍可能是空的。</p><h3 id="4-检查-GitHub-Pages-设置"><a href="#4-检查-GitHub-Pages-设置" class="headerlink" title="4. 检查 GitHub Pages 设置"></a>4. 检查 GitHub Pages 设置</h3><ol><li><p>登录 GitHub，进入仓库：<a href="https://github.com/yangchen461/yangchen461.github.io">https://github.com/yangchen461/yangchen461.github.io</a></p></li><li><p>点击右上角 <code>Settings</code> → 左侧选择 <code>Pages</code></p></li><li><p>找到 </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><div class="code-wrapper"><button class="copy-btn" data-clipboard-snippet>copy</button><pre><code class="hljs ebnf"><span class="hljs-attribute">Branch</span><br></code></pre></div></td></tr></table></figure><p> 设置部分：</p><ul><li>确保 “Source” 分支选择的是 <code>master</code>（或者你实际使用的分支）</li><li>如果没有设置，选择后点击 Save</li></ul></li></ol><hr><h3 id="5-最终验证部署是否成功"><a href="#5-最终验证部署是否成功" class="headerlink" title="5. 最终验证部署是否成功"></a>5. 最终验证部署是否成功</h3><p>部署完成后，你的博客地址将从本地地址：</p><p><a href="http://localhost:4000/">http://localhost:4000</a></p><p>变为线上地址：</p><p><a href="https://yangchen461.github.io/">https://yangchen461.github.io</a></p><h3 id="5-Github库的删除"><a href="#5-Github库的删除" class="headerlink" title="5. Github库的删除"></a>5. Github库的删除</h3><p>在我想要删除 test2 的库的时候，不小心删除了整个库，这里注意在 setting 设置中执行命令 <strong>Delete this repository</strong>，会删除整个库，而不是其中的某个文件夹或文件。</p><p><img src="/images/20250324/image-20250321164606677.png" alt="image-20250321164606677"></p><p>如果想要删除某个文件，只能够在编辑界面删除，如下：</p><p><img src="/images/20250324/image-20250321164548910.png" alt="image-20250321164548910"></p><p><img src="/images/20250324/image-20250321164649781.png" alt="image-20250321164649781"></p><p>如果想要删除某个文件夹，只能够一个个的删除其中的文件，然后文件夹自动消失。</p>]]></content>
      
      
      <categories>
          
          <category> Blog Building </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
